// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

/*
Package BlackJack_grpc is a generated protocol buffer package.

It is generated from these files:
	grpc.proto

It has these top-level messages:
	MasterTemplate
	RequestMasterTemplateStorage
	BluetoothRequestSettingsStorage
	BluetoothSettings
	BluetoothAgentSettings
	BluetoothNetworkService
	BluetoothControllerSettings
	BluetoothControllerInformation
	TriggerActionSet
	TriggerAction
	TriggerServiceStarted
	TriggerUSBGadgetConnected
	TriggerUSBGadgetDisconnected
	TriggerWifiAPStarted
	TriggerWifiConnectedAsSta
	TriggerSSHLogin
	TriggerDHCPLeaseGranted
	TriggerGroupReceive
	TriggerGroupReceiveMulti
	TriggerGPIOIn
	ActionStartBashScript
	ActionStartHIDScript
	ActionDeploySettingsTemplate
	ActionLog
	ActionGPIOOut
	ActionGroupSend
	WifiRequestSettingsStorage
	WiFiSettings
	WiFiState
	WiFiBSSCfg
	StringMessage
	StringMessageArray
	EventRequest
	EventValue
	Event
	TempDirOrFileRequest
	TempDirOrFileResponse
	ReadFileRequest
	ReadFileResponse
	WriteFileRequest
	FileInfoRequest
	FileInfoResponse
	HIDScriptRequest
	HIDScriptJob
	HIDScriptJobList
	HIDRunningJobStateResult
	HIDScriptResult
	LEDSettings
	USBRequestSettingsStorage
	GadgetSettings
	GadgetSettingsEthernet
	GadgetSettingsUMS
	EthernetRequestSettingsStorage
	DeployedEthernetInterfaceSettings
	EthernetInterfaceSettings
	DHCPServerSettings
	DHCPServerRange
	DHCPServerStaticHost
	Empty
*/
package BlackJack_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BluetoothNetworkServiceType int32

const (
	BluetoothNetworkServiceType_NAP  BluetoothNetworkServiceType = 0
	BluetoothNetworkServiceType_PANU BluetoothNetworkServiceType = 1
	BluetoothNetworkServiceType_GN   BluetoothNetworkServiceType = 2
)

var BluetoothNetworkServiceType_name = map[int32]string{
	0: "NAP",
	1: "PANU",
	2: "GN",
}
var BluetoothNetworkServiceType_value = map[string]int32{
	"NAP":  0,
	"PANU": 1,
	"GN":   2,
}

func (x BluetoothNetworkServiceType) String() string {
	return proto.EnumName(BluetoothNetworkServiceType_name, int32(x))
}
func (BluetoothNetworkServiceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GroupReceiveMultiType int32

const (
	GroupReceiveMultiType_SEQUENCE       GroupReceiveMultiType = 0
	GroupReceiveMultiType_AND            GroupReceiveMultiType = 1
	GroupReceiveMultiType_OR             GroupReceiveMultiType = 2
	GroupReceiveMultiType_EXACT_SEQUENCE GroupReceiveMultiType = 3
)

var GroupReceiveMultiType_name = map[int32]string{
	0: "SEQUENCE",
	1: "AND",
	2: "OR",
	3: "EXACT_SEQUENCE",
}
var GroupReceiveMultiType_value = map[string]int32{
	"SEQUENCE":       0,
	"AND":            1,
	"OR":             2,
	"EXACT_SEQUENCE": 3,
}

func (x GroupReceiveMultiType) String() string {
	return proto.EnumName(GroupReceiveMultiType_name, int32(x))
}
func (GroupReceiveMultiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GPIOInPullUpDown int32

const (
	GPIOInPullUpDown_UP   GPIOInPullUpDown = 0
	GPIOInPullUpDown_DOWN GPIOInPullUpDown = 1
	GPIOInPullUpDown_OFF  GPIOInPullUpDown = 2
)

var GPIOInPullUpDown_name = map[int32]string{
	0: "UP",
	1: "DOWN",
	2: "OFF",
}
var GPIOInPullUpDown_value = map[string]int32{
	"UP":   0,
	"DOWN": 1,
	"OFF":  2,
}

func (x GPIOInPullUpDown) String() string {
	return proto.EnumName(GPIOInPullUpDown_name, int32(x))
}
func (GPIOInPullUpDown) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GPIOInEdge int32

const (
	GPIOInEdge_RISING  GPIOInEdge = 0
	GPIOInEdge_FALLING GPIOInEdge = 1
	GPIOInEdge_BOTH    GPIOInEdge = 2
)

var GPIOInEdge_name = map[int32]string{
	0: "RISING",
	1: "FALLING",
	2: "BOTH",
}
var GPIOInEdge_value = map[string]int32{
	"RISING":  0,
	"FALLING": 1,
	"BOTH":    2,
}

func (x GPIOInEdge) String() string {
	return proto.EnumName(GPIOInEdge_name, int32(x))
}
func (GPIOInEdge) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GPIOOutValue int32

const (
	GPIOOutValue_LOW    GPIOOutValue = 0
	GPIOOutValue_HIGH   GPIOOutValue = 1
	GPIOOutValue_TOGGLE GPIOOutValue = 2
)

var GPIOOutValue_name = map[int32]string{
	0: "LOW",
	1: "HIGH",
	2: "TOGGLE",
}
var GPIOOutValue_value = map[string]int32{
	"LOW":    0,
	"HIGH":   1,
	"TOGGLE": 2,
}

func (x GPIOOutValue) String() string {
	return proto.EnumName(GPIOOutValue_name, int32(x))
}
func (GPIOOutValue) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// WiFi2 (distinguish state and settings)
type WiFiWorkingMode int32

const (
	WiFiWorkingMode_UNKNOWN         WiFiWorkingMode = 0
	WiFiWorkingMode_AP              WiFiWorkingMode = 1
	WiFiWorkingMode_STA             WiFiWorkingMode = 2
	WiFiWorkingMode_STA_FAILOVER_AP WiFiWorkingMode = 3
)

var WiFiWorkingMode_name = map[int32]string{
	0: "UNKNOWN",
	1: "AP",
	2: "STA",
	3: "STA_FAILOVER_AP",
}
var WiFiWorkingMode_value = map[string]int32{
	"UNKNOWN":         0,
	"AP":              1,
	"STA":             2,
	"STA_FAILOVER_AP": 3,
}

func (x WiFiWorkingMode) String() string {
	return proto.EnumName(WiFiWorkingMode_name, int32(x))
}
func (WiFiWorkingMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type WiFiStateMode int32

const (
	WiFiStateMode_STA_NOT_CONNECTED WiFiStateMode = 0
	WiFiStateMode_AP_UP             WiFiStateMode = 1
	WiFiStateMode_STA_CONNECTED     WiFiStateMode = 2
)

var WiFiStateMode_name = map[int32]string{
	0: "STA_NOT_CONNECTED",
	1: "AP_UP",
	2: "STA_CONNECTED",
}
var WiFiStateMode_value = map[string]int32{
	"STA_NOT_CONNECTED": 0,
	"AP_UP":             1,
	"STA_CONNECTED":     2,
}

func (x WiFiStateMode) String() string {
	return proto.EnumName(WiFiStateMode_name, int32(x))
}
func (WiFiStateMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type WiFiAuthMode int32

const (
	WiFiAuthMode_WPA2_PSK WiFiAuthMode = 0
	WiFiAuthMode_OPEN     WiFiAuthMode = 1
)

var WiFiAuthMode_name = map[int32]string{
	0: "WPA2_PSK",
	1: "OPEN",
}
var WiFiAuthMode_value = map[string]int32{
	"WPA2_PSK": 0,
	"OPEN":     1,
}

func (x WiFiAuthMode) String() string {
	return proto.EnumName(WiFiAuthMode_name, int32(x))
}
func (WiFiAuthMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type AccessibleFolder int32

const (
	AccessibleFolder_TMP          AccessibleFolder = 0
	AccessibleFolder_BASH_SCRIPTS AccessibleFolder = 1
	AccessibleFolder_HID_SCRIPTS  AccessibleFolder = 2
)

var AccessibleFolder_name = map[int32]string{
	0: "TMP",
	1: "BASH_SCRIPTS",
	2: "HID_SCRIPTS",
}
var AccessibleFolder_value = map[string]int32{
	"TMP":          0,
	"BASH_SCRIPTS": 1,
	"HID_SCRIPTS":  2,
}

func (x AccessibleFolder) String() string {
	return proto.EnumName(AccessibleFolder_name, int32(x))
}
func (AccessibleFolder) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ActionDeploySettingsTemplate_TemplateType int32

const (
	ActionDeploySettingsTemplate_FULL_SETTINGS   ActionDeploySettingsTemplate_TemplateType = 0
	ActionDeploySettingsTemplate_NETWORK         ActionDeploySettingsTemplate_TemplateType = 1
	ActionDeploySettingsTemplate_WIFI            ActionDeploySettingsTemplate_TemplateType = 2
	ActionDeploySettingsTemplate_USB             ActionDeploySettingsTemplate_TemplateType = 3
	ActionDeploySettingsTemplate_BLUETOOTH       ActionDeploySettingsTemplate_TemplateType = 4
	ActionDeploySettingsTemplate_TRIGGER_ACTIONS ActionDeploySettingsTemplate_TemplateType = 5
)

var ActionDeploySettingsTemplate_TemplateType_name = map[int32]string{
	0: "FULL_SETTINGS",
	1: "NETWORK",
	2: "WIFI",
	3: "USB",
	4: "BLUETOOTH",
	5: "TRIGGER_ACTIONS",
}
var ActionDeploySettingsTemplate_TemplateType_value = map[string]int32{
	"FULL_SETTINGS":   0,
	"NETWORK":         1,
	"WIFI":            2,
	"USB":             3,
	"BLUETOOTH":       4,
	"TRIGGER_ACTIONS": 5,
}

func (x ActionDeploySettingsTemplate_TemplateType) String() string {
	return proto.EnumName(ActionDeploySettingsTemplate_TemplateType_name, int32(x))
}
func (ActionDeploySettingsTemplate_TemplateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 0}
}

type EthernetInterfaceSettings_Mode int32

const (
	EthernetInterfaceSettings_MANUAL      EthernetInterfaceSettings_Mode = 0
	EthernetInterfaceSettings_DHCP_CLIENT EthernetInterfaceSettings_Mode = 1
	EthernetInterfaceSettings_DHCP_SERVER EthernetInterfaceSettings_Mode = 2
	EthernetInterfaceSettings_UNMANAGED   EthernetInterfaceSettings_Mode = 3
)

var EthernetInterfaceSettings_Mode_name = map[int32]string{
	0: "MANUAL",
	1: "DHCP_CLIENT",
	2: "DHCP_SERVER",
	3: "UNMANAGED",
}
var EthernetInterfaceSettings_Mode_value = map[string]int32{
	"MANUAL":      0,
	"DHCP_CLIENT": 1,
	"DHCP_SERVER": 2,
	"UNMANAGED":   3,
}

func (x EthernetInterfaceSettings_Mode) String() string {
	return proto.EnumName(EthernetInterfaceSettings_Mode_name, int32(x))
}
func (EthernetInterfaceSettings_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{54, 0}
}

// MasterTemplates
type MasterTemplate struct {
	TemplateNameBluetooth      string   `protobuf:"bytes,1,opt,name=template_name_bluetooth,json=templateNameBluetooth" json:"template_name_bluetooth,omitempty"`
	TemplateNameUsb            string   `protobuf:"bytes,2,opt,name=template_name_usb,json=templateNameUsb" json:"template_name_usb,omitempty"`
	TemplateNameWifi           string   `protobuf:"bytes,3,opt,name=template_name_wifi,json=templateNameWifi" json:"template_name_wifi,omitempty"`
	TemplateNameTriggerActions string   `protobuf:"bytes,4,opt,name=template_name_trigger_actions,json=templateNameTriggerActions" json:"template_name_trigger_actions,omitempty"`
	TemplateNamesNetwork       []string `protobuf:"bytes,5,rep,name=template_names_network,json=templateNamesNetwork" json:"template_names_network,omitempty"`
}

func (m *MasterTemplate) Reset()                    { *m = MasterTemplate{} }
func (m *MasterTemplate) String() string            { return proto.CompactTextString(m) }
func (*MasterTemplate) ProtoMessage()               {}
func (*MasterTemplate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MasterTemplate) GetTemplateNameBluetooth() string {
	if m != nil {
		return m.TemplateNameBluetooth
	}
	return ""
}

func (m *MasterTemplate) GetTemplateNameUsb() string {
	if m != nil {
		return m.TemplateNameUsb
	}
	return ""
}

func (m *MasterTemplate) GetTemplateNameWifi() string {
	if m != nil {
		return m.TemplateNameWifi
	}
	return ""
}

func (m *MasterTemplate) GetTemplateNameTriggerActions() string {
	if m != nil {
		return m.TemplateNameTriggerActions
	}
	return ""
}

func (m *MasterTemplate) GetTemplateNamesNetwork() []string {
	if m != nil {
		return m.TemplateNamesNetwork
	}
	return nil
}

type RequestMasterTemplateStorage struct {
	TemplateName string          `protobuf:"bytes,1,opt,name=TemplateName" json:"TemplateName,omitempty"`
	Template     *MasterTemplate `protobuf:"bytes,2,opt,name=template" json:"template,omitempty"`
}

func (m *RequestMasterTemplateStorage) Reset()                    { *m = RequestMasterTemplateStorage{} }
func (m *RequestMasterTemplateStorage) String() string            { return proto.CompactTextString(m) }
func (*RequestMasterTemplateStorage) ProtoMessage()               {}
func (*RequestMasterTemplateStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RequestMasterTemplateStorage) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *RequestMasterTemplateStorage) GetTemplate() *MasterTemplate {
	if m != nil {
		return m.Template
	}
	return nil
}

// Bluetooth
type BluetoothRequestSettingsStorage struct {
	TemplateName string             `protobuf:"bytes,1,opt,name=TemplateName" json:"TemplateName,omitempty"`
	Settings     *BluetoothSettings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
}

func (m *BluetoothRequestSettingsStorage) Reset()                    { *m = BluetoothRequestSettingsStorage{} }
func (m *BluetoothRequestSettingsStorage) String() string            { return proto.CompactTextString(m) }
func (*BluetoothRequestSettingsStorage) ProtoMessage()               {}
func (*BluetoothRequestSettingsStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BluetoothRequestSettingsStorage) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *BluetoothRequestSettingsStorage) GetSettings() *BluetoothSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type BluetoothSettings struct {
	Ci *BluetoothControllerInformation `protobuf:"bytes,1,opt,name=ci" json:"ci,omitempty"`
	As *BluetoothAgentSettings         `protobuf:"bytes,2,opt,name=as" json:"as,omitempty"`
}

func (m *BluetoothSettings) Reset()                    { *m = BluetoothSettings{} }
func (m *BluetoothSettings) String() string            { return proto.CompactTextString(m) }
func (*BluetoothSettings) ProtoMessage()               {}
func (*BluetoothSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BluetoothSettings) GetCi() *BluetoothControllerInformation {
	if m != nil {
		return m.Ci
	}
	return nil
}

func (m *BluetoothSettings) GetAs() *BluetoothAgentSettings {
	if m != nil {
		return m.As
	}
	return nil
}

type BluetoothAgentSettings struct {
	Pin string `protobuf:"bytes,1,opt,name=pin" json:"pin,omitempty"`
}

func (m *BluetoothAgentSettings) Reset()                    { *m = BluetoothAgentSettings{} }
func (m *BluetoothAgentSettings) String() string            { return proto.CompactTextString(m) }
func (*BluetoothAgentSettings) ProtoMessage()               {}
func (*BluetoothAgentSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BluetoothAgentSettings) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

type BluetoothNetworkService struct {
	RegisterOrUnregister bool                        `protobuf:"varint,1,opt,name=register_or_unregister,json=registerOrUnregister" json:"register_or_unregister,omitempty"`
	ServerOrConnect      bool                        `protobuf:"varint,2,opt,name=server_or_connect,json=serverOrConnect" json:"server_or_connect,omitempty"`
	Type                 BluetoothNetworkServiceType `protobuf:"varint,3,opt,name=type,enum=BlackJack_grpc.BluetoothNetworkServiceType" json:"type,omitempty"`
	MacOrName            string                      `protobuf:"bytes,4,opt,name=mac_or_name,json=macOrName" json:"mac_or_name,omitempty"`
	BridgeName           string                      `protobuf:"bytes,5,opt,name=bridge_name,json=bridgeName" json:"bridge_name,omitempty"`
}

func (m *BluetoothNetworkService) Reset()                    { *m = BluetoothNetworkService{} }
func (m *BluetoothNetworkService) String() string            { return proto.CompactTextString(m) }
func (*BluetoothNetworkService) ProtoMessage()               {}
func (*BluetoothNetworkService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BluetoothNetworkService) GetRegisterOrUnregister() bool {
	if m != nil {
		return m.RegisterOrUnregister
	}
	return false
}

func (m *BluetoothNetworkService) GetServerOrConnect() bool {
	if m != nil {
		return m.ServerOrConnect
	}
	return false
}

func (m *BluetoothNetworkService) GetType() BluetoothNetworkServiceType {
	if m != nil {
		return m.Type
	}
	return BluetoothNetworkServiceType_NAP
}

func (m *BluetoothNetworkService) GetMacOrName() string {
	if m != nil {
		return m.MacOrName
	}
	return ""
}

func (m *BluetoothNetworkService) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

type BluetoothControllerSettings struct {
	Powered                 bool `protobuf:"varint,1,opt,name=powered" json:"powered,omitempty"`
	Connectable             bool `protobuf:"varint,2,opt,name=connectable" json:"connectable,omitempty"`
	FastConnectable         bool `protobuf:"varint,3,opt,name=fast_connectable,json=fastConnectable" json:"fast_connectable,omitempty"`
	Discoverable            bool `protobuf:"varint,4,opt,name=discoverable" json:"discoverable,omitempty"`
	Bondable                bool `protobuf:"varint,5,opt,name=bondable" json:"bondable,omitempty"`
	LinkLevelSecurity       bool `protobuf:"varint,6,opt,name=link_level_security,json=linkLevelSecurity" json:"link_level_security,omitempty"`
	SecureSimplePairing     bool `protobuf:"varint,7,opt,name=secure_simple_pairing,json=secureSimplePairing" json:"secure_simple_pairing,omitempty"`
	BrEdr                   bool `protobuf:"varint,8,opt,name=br_edr,json=brEdr" json:"br_edr,omitempty"`
	HighSpeed               bool `protobuf:"varint,9,opt,name=high_speed,json=highSpeed" json:"high_speed,omitempty"`
	LowEnergy               bool `protobuf:"varint,10,opt,name=low_energy,json=lowEnergy" json:"low_energy,omitempty"`
	Advertising             bool `protobuf:"varint,11,opt,name=advertising" json:"advertising,omitempty"`
	SecureConnections       bool `protobuf:"varint,12,opt,name=secure_connections,json=secureConnections" json:"secure_connections,omitempty"`
	DebugKeys               bool `protobuf:"varint,13,opt,name=debug_keys,json=debugKeys" json:"debug_keys,omitempty"`
	Privacy                 bool `protobuf:"varint,14,opt,name=privacy" json:"privacy,omitempty"`
	ControllerConfiguration bool `protobuf:"varint,15,opt,name=controller_configuration,json=controllerConfiguration" json:"controller_configuration,omitempty"`
	StaticAddress           bool `protobuf:"varint,16,opt,name=static_address,json=staticAddress" json:"static_address,omitempty"`
}

func (m *BluetoothControllerSettings) Reset()                    { *m = BluetoothControllerSettings{} }
func (m *BluetoothControllerSettings) String() string            { return proto.CompactTextString(m) }
func (*BluetoothControllerSettings) ProtoMessage()               {}
func (*BluetoothControllerSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BluetoothControllerSettings) GetPowered() bool {
	if m != nil {
		return m.Powered
	}
	return false
}

func (m *BluetoothControllerSettings) GetConnectable() bool {
	if m != nil {
		return m.Connectable
	}
	return false
}

func (m *BluetoothControllerSettings) GetFastConnectable() bool {
	if m != nil {
		return m.FastConnectable
	}
	return false
}

func (m *BluetoothControllerSettings) GetDiscoverable() bool {
	if m != nil {
		return m.Discoverable
	}
	return false
}

func (m *BluetoothControllerSettings) GetBondable() bool {
	if m != nil {
		return m.Bondable
	}
	return false
}

func (m *BluetoothControllerSettings) GetLinkLevelSecurity() bool {
	if m != nil {
		return m.LinkLevelSecurity
	}
	return false
}

func (m *BluetoothControllerSettings) GetSecureSimplePairing() bool {
	if m != nil {
		return m.SecureSimplePairing
	}
	return false
}

func (m *BluetoothControllerSettings) GetBrEdr() bool {
	if m != nil {
		return m.BrEdr
	}
	return false
}

func (m *BluetoothControllerSettings) GetHighSpeed() bool {
	if m != nil {
		return m.HighSpeed
	}
	return false
}

func (m *BluetoothControllerSettings) GetLowEnergy() bool {
	if m != nil {
		return m.LowEnergy
	}
	return false
}

func (m *BluetoothControllerSettings) GetAdvertising() bool {
	if m != nil {
		return m.Advertising
	}
	return false
}

func (m *BluetoothControllerSettings) GetSecureConnections() bool {
	if m != nil {
		return m.SecureConnections
	}
	return false
}

func (m *BluetoothControllerSettings) GetDebugKeys() bool {
	if m != nil {
		return m.DebugKeys
	}
	return false
}

func (m *BluetoothControllerSettings) GetPrivacy() bool {
	if m != nil {
		return m.Privacy
	}
	return false
}

func (m *BluetoothControllerSettings) GetControllerConfiguration() bool {
	if m != nil {
		return m.ControllerConfiguration
	}
	return false
}

func (m *BluetoothControllerSettings) GetStaticAddress() bool {
	if m != nil {
		return m.StaticAddress
	}
	return false
}

type BluetoothControllerInformation struct {
	Address                  []byte                       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BluetoothVersion         uint32                       `protobuf:"varint,2,opt,name=bluetooth_version,json=bluetoothVersion" json:"bluetooth_version,omitempty"`
	Manufacturer             uint32                       `protobuf:"varint,3,opt,name=manufacturer" json:"manufacturer,omitempty"`
	SupportedSettings        *BluetoothControllerSettings `protobuf:"bytes,4,opt,name=supported_settings,json=supportedSettings" json:"supported_settings,omitempty"`
	CurrentSettings          *BluetoothControllerSettings `protobuf:"bytes,5,opt,name=current_settings,json=currentSettings" json:"current_settings,omitempty"`
	ClassOfDevice            []byte                       `protobuf:"bytes,6,opt,name=class_of_device,json=classOfDevice,proto3" json:"class_of_device,omitempty"`
	Name                     string                       `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	ShortName                string                       `protobuf:"bytes,8,opt,name=short_name,json=shortName" json:"short_name,omitempty"`
	IsAvailable              bool                         `protobuf:"varint,9,opt,name=is_available,json=isAvailable" json:"is_available,omitempty"`
	ServiceNetworkServerNap  bool                         `protobuf:"varint,10,opt,name=service_network_server_nap,json=serviceNetworkServerNap" json:"service_network_server_nap,omitempty"`
	ServiceNetworkServerPanu bool                         `protobuf:"varint,11,opt,name=service_network_server_panu,json=serviceNetworkServerPanu" json:"service_network_server_panu,omitempty"`
	ServiceNetworkServerGn   bool                         `protobuf:"varint,12,opt,name=service_network_server_gn,json=serviceNetworkServerGn" json:"service_network_server_gn,omitempty"`
}

func (m *BluetoothControllerInformation) Reset()                    { *m = BluetoothControllerInformation{} }
func (m *BluetoothControllerInformation) String() string            { return proto.CompactTextString(m) }
func (*BluetoothControllerInformation) ProtoMessage()               {}
func (*BluetoothControllerInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BluetoothControllerInformation) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *BluetoothControllerInformation) GetBluetoothVersion() uint32 {
	if m != nil {
		return m.BluetoothVersion
	}
	return 0
}

func (m *BluetoothControllerInformation) GetManufacturer() uint32 {
	if m != nil {
		return m.Manufacturer
	}
	return 0
}

func (m *BluetoothControllerInformation) GetSupportedSettings() *BluetoothControllerSettings {
	if m != nil {
		return m.SupportedSettings
	}
	return nil
}

func (m *BluetoothControllerInformation) GetCurrentSettings() *BluetoothControllerSettings {
	if m != nil {
		return m.CurrentSettings
	}
	return nil
}

func (m *BluetoothControllerInformation) GetClassOfDevice() []byte {
	if m != nil {
		return m.ClassOfDevice
	}
	return nil
}

func (m *BluetoothControllerInformation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BluetoothControllerInformation) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *BluetoothControllerInformation) GetIsAvailable() bool {
	if m != nil {
		return m.IsAvailable
	}
	return false
}

func (m *BluetoothControllerInformation) GetServiceNetworkServerNap() bool {
	if m != nil {
		return m.ServiceNetworkServerNap
	}
	return false
}

func (m *BluetoothControllerInformation) GetServiceNetworkServerPanu() bool {
	if m != nil {
		return m.ServiceNetworkServerPanu
	}
	return false
}

func (m *BluetoothControllerInformation) GetServiceNetworkServerGn() bool {
	if m != nil {
		return m.ServiceNetworkServerGn
	}
	return false
}

// Triggers, Actions and resulting TriggerActions
type TriggerActionSet struct {
	TriggerActions []*TriggerAction `protobuf:"bytes,1,rep,name=TriggerActions" json:"TriggerActions,omitempty"`
	Name           string           `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *TriggerActionSet) Reset()                    { *m = TriggerActionSet{} }
func (m *TriggerActionSet) String() string            { return proto.CompactTextString(m) }
func (*TriggerActionSet) ProtoMessage()               {}
func (*TriggerActionSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TriggerActionSet) GetTriggerActions() []*TriggerAction {
	if m != nil {
		return m.TriggerActions
	}
	return nil
}

func (m *TriggerActionSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TriggerAction struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OneShot   bool   `protobuf:"varint,2,opt,name=oneShot" json:"oneShot,omitempty"`
	IsActive  bool   `protobuf:"varint,3,opt,name=isActive" json:"isActive,omitempty"`
	Immutable bool   `protobuf:"varint,4,opt,name=immutable" json:"immutable,omitempty"`
	// Types that are valid to be assigned to Trigger:
	//	*TriggerAction_ServiceStarted
	//	*TriggerAction_UsbGadgetConnected
	//	*TriggerAction_UsbGadgetDisconnected
	//	*TriggerAction_WifiAPStarted
	//	*TriggerAction_WifiConnectedAsSta
	//	*TriggerAction_SshLogin
	//	*TriggerAction_DhcpLeaseGranted
	//	*TriggerAction_GroupReceive
	//	*TriggerAction_GroupReceiveMulti
	//	*TriggerAction_GpioIn
	Trigger isTriggerAction_Trigger `protobuf_oneof:"Trigger"`
	// Types that are valid to be assigned to Action:
	//	*TriggerAction_BashScript
	//	*TriggerAction_HidScript
	//	*TriggerAction_DeploySettingsTemplate
	//	*TriggerAction_Log
	//	*TriggerAction_GpioOut
	//	*TriggerAction_GroupSend
	Action isTriggerAction_Action `protobuf_oneof:"Action"`
}

func (m *TriggerAction) Reset()                    { *m = TriggerAction{} }
func (m *TriggerAction) String() string            { return proto.CompactTextString(m) }
func (*TriggerAction) ProtoMessage()               {}
func (*TriggerAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type isTriggerAction_Trigger interface {
	isTriggerAction_Trigger()
}
type isTriggerAction_Action interface {
	isTriggerAction_Action()
}

type TriggerAction_ServiceStarted struct {
	ServiceStarted *TriggerServiceStarted `protobuf:"bytes,5,opt,name=serviceStarted,oneof"`
}
type TriggerAction_UsbGadgetConnected struct {
	UsbGadgetConnected *TriggerUSBGadgetConnected `protobuf:"bytes,6,opt,name=usbGadgetConnected,oneof"`
}
type TriggerAction_UsbGadgetDisconnected struct {
	UsbGadgetDisconnected *TriggerUSBGadgetDisconnected `protobuf:"bytes,7,opt,name=usbGadgetDisconnected,oneof"`
}
type TriggerAction_WifiAPStarted struct {
	WifiAPStarted *TriggerWifiAPStarted `protobuf:"bytes,8,opt,name=wifiAPStarted,oneof"`
}
type TriggerAction_WifiConnectedAsSta struct {
	WifiConnectedAsSta *TriggerWifiConnectedAsSta `protobuf:"bytes,9,opt,name=wifiConnectedAsSta,oneof"`
}
type TriggerAction_SshLogin struct {
	SshLogin *TriggerSSHLogin `protobuf:"bytes,10,opt,name=sshLogin,oneof"`
}
type TriggerAction_DhcpLeaseGranted struct {
	DhcpLeaseGranted *TriggerDHCPLeaseGranted `protobuf:"bytes,11,opt,name=dhcpLeaseGranted,oneof"`
}
type TriggerAction_GroupReceive struct {
	GroupReceive *TriggerGroupReceive `protobuf:"bytes,12,opt,name=groupReceive,oneof"`
}
type TriggerAction_GroupReceiveMulti struct {
	GroupReceiveMulti *TriggerGroupReceiveMulti `protobuf:"bytes,13,opt,name=groupReceiveMulti,oneof"`
}
type TriggerAction_GpioIn struct {
	GpioIn *TriggerGPIOIn `protobuf:"bytes,14,opt,name=gpioIn,oneof"`
}
type TriggerAction_BashScript struct {
	BashScript *ActionStartBashScript `protobuf:"bytes,15,opt,name=bashScript,oneof"`
}
type TriggerAction_HidScript struct {
	HidScript *ActionStartHIDScript `protobuf:"bytes,16,opt,name=hidScript,oneof"`
}
type TriggerAction_DeploySettingsTemplate struct {
	DeploySettingsTemplate *ActionDeploySettingsTemplate `protobuf:"bytes,17,opt,name=deploySettingsTemplate,oneof"`
}
type TriggerAction_Log struct {
	Log *ActionLog `protobuf:"bytes,18,opt,name=log,oneof"`
}
type TriggerAction_GpioOut struct {
	GpioOut *ActionGPIOOut `protobuf:"bytes,19,opt,name=gpioOut,oneof"`
}
type TriggerAction_GroupSend struct {
	GroupSend *ActionGroupSend `protobuf:"bytes,20,opt,name=groupSend,oneof"`
}

func (*TriggerAction_ServiceStarted) isTriggerAction_Trigger()        {}
func (*TriggerAction_UsbGadgetConnected) isTriggerAction_Trigger()    {}
func (*TriggerAction_UsbGadgetDisconnected) isTriggerAction_Trigger() {}
func (*TriggerAction_WifiAPStarted) isTriggerAction_Trigger()         {}
func (*TriggerAction_WifiConnectedAsSta) isTriggerAction_Trigger()    {}
func (*TriggerAction_SshLogin) isTriggerAction_Trigger()              {}
func (*TriggerAction_DhcpLeaseGranted) isTriggerAction_Trigger()      {}
func (*TriggerAction_GroupReceive) isTriggerAction_Trigger()          {}
func (*TriggerAction_GroupReceiveMulti) isTriggerAction_Trigger()     {}
func (*TriggerAction_GpioIn) isTriggerAction_Trigger()                {}
func (*TriggerAction_BashScript) isTriggerAction_Action()             {}
func (*TriggerAction_HidScript) isTriggerAction_Action()              {}
func (*TriggerAction_DeploySettingsTemplate) isTriggerAction_Action() {}
func (*TriggerAction_Log) isTriggerAction_Action()                    {}
func (*TriggerAction_GpioOut) isTriggerAction_Action()                {}
func (*TriggerAction_GroupSend) isTriggerAction_Action()              {}

func (m *TriggerAction) GetTrigger() isTriggerAction_Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}
func (m *TriggerAction) GetAction() isTriggerAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *TriggerAction) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TriggerAction) GetOneShot() bool {
	if m != nil {
		return m.OneShot
	}
	return false
}

func (m *TriggerAction) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *TriggerAction) GetImmutable() bool {
	if m != nil {
		return m.Immutable
	}
	return false
}

func (m *TriggerAction) GetServiceStarted() *TriggerServiceStarted {
	if x, ok := m.GetTrigger().(*TriggerAction_ServiceStarted); ok {
		return x.ServiceStarted
	}
	return nil
}

func (m *TriggerAction) GetUsbGadgetConnected() *TriggerUSBGadgetConnected {
	if x, ok := m.GetTrigger().(*TriggerAction_UsbGadgetConnected); ok {
		return x.UsbGadgetConnected
	}
	return nil
}

func (m *TriggerAction) GetUsbGadgetDisconnected() *TriggerUSBGadgetDisconnected {
	if x, ok := m.GetTrigger().(*TriggerAction_UsbGadgetDisconnected); ok {
		return x.UsbGadgetDisconnected
	}
	return nil
}

func (m *TriggerAction) GetWifiAPStarted() *TriggerWifiAPStarted {
	if x, ok := m.GetTrigger().(*TriggerAction_WifiAPStarted); ok {
		return x.WifiAPStarted
	}
	return nil
}

func (m *TriggerAction) GetWifiConnectedAsSta() *TriggerWifiConnectedAsSta {
	if x, ok := m.GetTrigger().(*TriggerAction_WifiConnectedAsSta); ok {
		return x.WifiConnectedAsSta
	}
	return nil
}

func (m *TriggerAction) GetSshLogin() *TriggerSSHLogin {
	if x, ok := m.GetTrigger().(*TriggerAction_SshLogin); ok {
		return x.SshLogin
	}
	return nil
}

func (m *TriggerAction) GetDhcpLeaseGranted() *TriggerDHCPLeaseGranted {
	if x, ok := m.GetTrigger().(*TriggerAction_DhcpLeaseGranted); ok {
		return x.DhcpLeaseGranted
	}
	return nil
}

func (m *TriggerAction) GetGroupReceive() *TriggerGroupReceive {
	if x, ok := m.GetTrigger().(*TriggerAction_GroupReceive); ok {
		return x.GroupReceive
	}
	return nil
}

func (m *TriggerAction) GetGroupReceiveMulti() *TriggerGroupReceiveMulti {
	if x, ok := m.GetTrigger().(*TriggerAction_GroupReceiveMulti); ok {
		return x.GroupReceiveMulti
	}
	return nil
}

func (m *TriggerAction) GetGpioIn() *TriggerGPIOIn {
	if x, ok := m.GetTrigger().(*TriggerAction_GpioIn); ok {
		return x.GpioIn
	}
	return nil
}

func (m *TriggerAction) GetBashScript() *ActionStartBashScript {
	if x, ok := m.GetAction().(*TriggerAction_BashScript); ok {
		return x.BashScript
	}
	return nil
}

func (m *TriggerAction) GetHidScript() *ActionStartHIDScript {
	if x, ok := m.GetAction().(*TriggerAction_HidScript); ok {
		return x.HidScript
	}
	return nil
}

func (m *TriggerAction) GetDeploySettingsTemplate() *ActionDeploySettingsTemplate {
	if x, ok := m.GetAction().(*TriggerAction_DeploySettingsTemplate); ok {
		return x.DeploySettingsTemplate
	}
	return nil
}

func (m *TriggerAction) GetLog() *ActionLog {
	if x, ok := m.GetAction().(*TriggerAction_Log); ok {
		return x.Log
	}
	return nil
}

func (m *TriggerAction) GetGpioOut() *ActionGPIOOut {
	if x, ok := m.GetAction().(*TriggerAction_GpioOut); ok {
		return x.GpioOut
	}
	return nil
}

func (m *TriggerAction) GetGroupSend() *ActionGroupSend {
	if x, ok := m.GetAction().(*TriggerAction_GroupSend); ok {
		return x.GroupSend
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TriggerAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TriggerAction_OneofMarshaler, _TriggerAction_OneofUnmarshaler, _TriggerAction_OneofSizer, []interface{}{
		(*TriggerAction_ServiceStarted)(nil),
		(*TriggerAction_UsbGadgetConnected)(nil),
		(*TriggerAction_UsbGadgetDisconnected)(nil),
		(*TriggerAction_WifiAPStarted)(nil),
		(*TriggerAction_WifiConnectedAsSta)(nil),
		(*TriggerAction_SshLogin)(nil),
		(*TriggerAction_DhcpLeaseGranted)(nil),
		(*TriggerAction_GroupReceive)(nil),
		(*TriggerAction_GroupReceiveMulti)(nil),
		(*TriggerAction_GpioIn)(nil),
		(*TriggerAction_BashScript)(nil),
		(*TriggerAction_HidScript)(nil),
		(*TriggerAction_DeploySettingsTemplate)(nil),
		(*TriggerAction_Log)(nil),
		(*TriggerAction_GpioOut)(nil),
		(*TriggerAction_GroupSend)(nil),
	}
}

func _TriggerAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TriggerAction)
	// Trigger
	switch x := m.Trigger.(type) {
	case *TriggerAction_ServiceStarted:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServiceStarted); err != nil {
			return err
		}
	case *TriggerAction_UsbGadgetConnected:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsbGadgetConnected); err != nil {
			return err
		}
	case *TriggerAction_UsbGadgetDisconnected:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UsbGadgetDisconnected); err != nil {
			return err
		}
	case *TriggerAction_WifiAPStarted:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WifiAPStarted); err != nil {
			return err
		}
	case *TriggerAction_WifiConnectedAsSta:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WifiConnectedAsSta); err != nil {
			return err
		}
	case *TriggerAction_SshLogin:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SshLogin); err != nil {
			return err
		}
	case *TriggerAction_DhcpLeaseGranted:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DhcpLeaseGranted); err != nil {
			return err
		}
	case *TriggerAction_GroupReceive:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroupReceive); err != nil {
			return err
		}
	case *TriggerAction_GroupReceiveMulti:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroupReceiveMulti); err != nil {
			return err
		}
	case *TriggerAction_GpioIn:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GpioIn); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TriggerAction.Trigger has unexpected type %T", x)
	}
	// Action
	switch x := m.Action.(type) {
	case *TriggerAction_BashScript:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BashScript); err != nil {
			return err
		}
	case *TriggerAction_HidScript:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HidScript); err != nil {
			return err
		}
	case *TriggerAction_DeploySettingsTemplate:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeploySettingsTemplate); err != nil {
			return err
		}
	case *TriggerAction_Log:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Log); err != nil {
			return err
		}
	case *TriggerAction_GpioOut:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GpioOut); err != nil {
			return err
		}
	case *TriggerAction_GroupSend:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroupSend); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TriggerAction.Action has unexpected type %T", x)
	}
	return nil
}

func _TriggerAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TriggerAction)
	switch tag {
	case 5: // Trigger.serviceStarted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TriggerServiceStarted)
		err := b.DecodeMessage(msg)
		m.Trigger = &TriggerAction_ServiceStarted{msg}
		return true, err
	case 6: // Trigger.usbGadgetConnected
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TriggerUSBGadgetConnected)
		err := b.DecodeMessage(msg)
		m.Trigger = &TriggerAction_UsbGadgetConnected{msg}
		return true, err
	case 7: // Trigger.usbGadgetDisconnected
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TriggerUSBGadgetDisconnected)
		err := b.DecodeMessage(msg)
		m.Trigger = &TriggerAction_UsbGadgetDisconnected{msg}
		return true, err
	case 8: // Trigger.wifiAPStarted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TriggerWifiAPStarted)
		err := b.DecodeMessage(msg)
		m.Trigger = &TriggerAction_WifiAPStarted{msg}
		return true, err
	case 9: // Trigger.wifiConnectedAsSta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TriggerWifiConnectedAsSta)
		err := b.DecodeMessage(msg)
		m.Trigger = &TriggerAction_WifiConnectedAsSta{msg}
		return true, err
	case 10: // Trigger.sshLogin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TriggerSSHLogin)
		err := b.DecodeMessage(msg)
		m.Trigger = &TriggerAction_SshLogin{msg}
		return true, err
	case 11: // Trigger.dhcpLeaseGranted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TriggerDHCPLeaseGranted)
		err := b.DecodeMessage(msg)
		m.Trigger = &TriggerAction_DhcpLeaseGranted{msg}
		return true, err
	case 12: // Trigger.groupReceive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TriggerGroupReceive)
		err := b.DecodeMessage(msg)
		m.Trigger = &TriggerAction_GroupReceive{msg}
		return true, err
	case 13: // Trigger.groupReceiveMulti
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TriggerGroupReceiveMulti)
		err := b.DecodeMessage(msg)
		m.Trigger = &TriggerAction_GroupReceiveMulti{msg}
		return true, err
	case 14: // Trigger.gpioIn
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TriggerGPIOIn)
		err := b.DecodeMessage(msg)
		m.Trigger = &TriggerAction_GpioIn{msg}
		return true, err
	case 15: // Action.bashScript
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionStartBashScript)
		err := b.DecodeMessage(msg)
		m.Action = &TriggerAction_BashScript{msg}
		return true, err
	case 16: // Action.hidScript
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionStartHIDScript)
		err := b.DecodeMessage(msg)
		m.Action = &TriggerAction_HidScript{msg}
		return true, err
	case 17: // Action.deploySettingsTemplate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionDeploySettingsTemplate)
		err := b.DecodeMessage(msg)
		m.Action = &TriggerAction_DeploySettingsTemplate{msg}
		return true, err
	case 18: // Action.log
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionLog)
		err := b.DecodeMessage(msg)
		m.Action = &TriggerAction_Log{msg}
		return true, err
	case 19: // Action.gpioOut
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionGPIOOut)
		err := b.DecodeMessage(msg)
		m.Action = &TriggerAction_GpioOut{msg}
		return true, err
	case 20: // Action.groupSend
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionGroupSend)
		err := b.DecodeMessage(msg)
		m.Action = &TriggerAction_GroupSend{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TriggerAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TriggerAction)
	// Trigger
	switch x := m.Trigger.(type) {
	case *TriggerAction_ServiceStarted:
		s := proto.Size(x.ServiceStarted)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_UsbGadgetConnected:
		s := proto.Size(x.UsbGadgetConnected)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_UsbGadgetDisconnected:
		s := proto.Size(x.UsbGadgetDisconnected)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_WifiAPStarted:
		s := proto.Size(x.WifiAPStarted)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_WifiConnectedAsSta:
		s := proto.Size(x.WifiConnectedAsSta)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_SshLogin:
		s := proto.Size(x.SshLogin)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_DhcpLeaseGranted:
		s := proto.Size(x.DhcpLeaseGranted)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_GroupReceive:
		s := proto.Size(x.GroupReceive)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_GroupReceiveMulti:
		s := proto.Size(x.GroupReceiveMulti)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_GpioIn:
		s := proto.Size(x.GpioIn)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// Action
	switch x := m.Action.(type) {
	case *TriggerAction_BashScript:
		s := proto.Size(x.BashScript)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_HidScript:
		s := proto.Size(x.HidScript)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_DeploySettingsTemplate:
		s := proto.Size(x.DeploySettingsTemplate)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_Log:
		s := proto.Size(x.Log)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_GpioOut:
		s := proto.Size(x.GpioOut)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TriggerAction_GroupSend:
		s := proto.Size(x.GroupSend)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TriggerServiceStarted struct {
}

func (m *TriggerServiceStarted) Reset()                    { *m = TriggerServiceStarted{} }
func (m *TriggerServiceStarted) String() string            { return proto.CompactTextString(m) }
func (*TriggerServiceStarted) ProtoMessage()               {}
func (*TriggerServiceStarted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type TriggerUSBGadgetConnected struct {
}

func (m *TriggerUSBGadgetConnected) Reset()                    { *m = TriggerUSBGadgetConnected{} }
func (m *TriggerUSBGadgetConnected) String() string            { return proto.CompactTextString(m) }
func (*TriggerUSBGadgetConnected) ProtoMessage()               {}
func (*TriggerUSBGadgetConnected) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type TriggerUSBGadgetDisconnected struct {
}

func (m *TriggerUSBGadgetDisconnected) Reset()                    { *m = TriggerUSBGadgetDisconnected{} }
func (m *TriggerUSBGadgetDisconnected) String() string            { return proto.CompactTextString(m) }
func (*TriggerUSBGadgetDisconnected) ProtoMessage()               {}
func (*TriggerUSBGadgetDisconnected) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type TriggerWifiAPStarted struct {
}

func (m *TriggerWifiAPStarted) Reset()                    { *m = TriggerWifiAPStarted{} }
func (m *TriggerWifiAPStarted) String() string            { return proto.CompactTextString(m) }
func (*TriggerWifiAPStarted) ProtoMessage()               {}
func (*TriggerWifiAPStarted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type TriggerWifiConnectedAsSta struct {
}

func (m *TriggerWifiConnectedAsSta) Reset()                    { *m = TriggerWifiConnectedAsSta{} }
func (m *TriggerWifiConnectedAsSta) String() string            { return proto.CompactTextString(m) }
func (*TriggerWifiConnectedAsSta) ProtoMessage()               {}
func (*TriggerWifiConnectedAsSta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type TriggerSSHLogin struct {
	LoginUser string `protobuf:"bytes,1,opt,name=loginUser" json:"loginUser,omitempty"`
}

func (m *TriggerSSHLogin) Reset()                    { *m = TriggerSSHLogin{} }
func (m *TriggerSSHLogin) String() string            { return proto.CompactTextString(m) }
func (*TriggerSSHLogin) ProtoMessage()               {}
func (*TriggerSSHLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *TriggerSSHLogin) GetLoginUser() string {
	if m != nil {
		return m.LoginUser
	}
	return ""
}

type TriggerDHCPLeaseGranted struct {
}

func (m *TriggerDHCPLeaseGranted) Reset()                    { *m = TriggerDHCPLeaseGranted{} }
func (m *TriggerDHCPLeaseGranted) String() string            { return proto.CompactTextString(m) }
func (*TriggerDHCPLeaseGranted) ProtoMessage()               {}
func (*TriggerDHCPLeaseGranted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type TriggerGroupReceive struct {
	GroupName string `protobuf:"bytes,1,opt,name=groupName" json:"groupName,omitempty"`
	Value     int32  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *TriggerGroupReceive) Reset()                    { *m = TriggerGroupReceive{} }
func (m *TriggerGroupReceive) String() string            { return proto.CompactTextString(m) }
func (*TriggerGroupReceive) ProtoMessage()               {}
func (*TriggerGroupReceive) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *TriggerGroupReceive) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *TriggerGroupReceive) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type TriggerGroupReceiveMulti struct {
	GroupName string                `protobuf:"bytes,1,opt,name=groupName" json:"groupName,omitempty"`
	Values    []int32               `protobuf:"varint,3,rep,packed,name=values" json:"values,omitempty"`
	Type      GroupReceiveMultiType `protobuf:"varint,4,opt,name=type,enum=BlackJack_grpc.GroupReceiveMultiType" json:"type,omitempty"`
}

func (m *TriggerGroupReceiveMulti) Reset()                    { *m = TriggerGroupReceiveMulti{} }
func (m *TriggerGroupReceiveMulti) String() string            { return proto.CompactTextString(m) }
func (*TriggerGroupReceiveMulti) ProtoMessage()               {}
func (*TriggerGroupReceiveMulti) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *TriggerGroupReceiveMulti) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *TriggerGroupReceiveMulti) GetValues() []int32 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *TriggerGroupReceiveMulti) GetType() GroupReceiveMultiType {
	if m != nil {
		return m.Type
	}
	return GroupReceiveMultiType_SEQUENCE
}

type TriggerGPIOIn struct {
	GpioName       string           `protobuf:"bytes,1,opt,name=gpio_name,json=gpioName" json:"gpio_name,omitempty"`
	PullUpDown     GPIOInPullUpDown `protobuf:"varint,2,opt,name=pullUpDown,enum=BlackJack_grpc.GPIOInPullUpDown" json:"pullUpDown,omitempty"`
	GpioInEdge     GPIOInEdge       `protobuf:"varint,3,opt,name=gpioInEdge,enum=BlackJack_grpc.GPIOInEdge" json:"gpioInEdge,omitempty"`
	DebounceMillis int64            `protobuf:"varint,4,opt,name=debounce_millis,json=debounceMillis" json:"debounce_millis,omitempty"`
}

func (m *TriggerGPIOIn) Reset()                    { *m = TriggerGPIOIn{} }
func (m *TriggerGPIOIn) String() string            { return proto.CompactTextString(m) }
func (*TriggerGPIOIn) ProtoMessage()               {}
func (*TriggerGPIOIn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *TriggerGPIOIn) GetGpioName() string {
	if m != nil {
		return m.GpioName
	}
	return ""
}

func (m *TriggerGPIOIn) GetPullUpDown() GPIOInPullUpDown {
	if m != nil {
		return m.PullUpDown
	}
	return GPIOInPullUpDown_UP
}

func (m *TriggerGPIOIn) GetGpioInEdge() GPIOInEdge {
	if m != nil {
		return m.GpioInEdge
	}
	return GPIOInEdge_RISING
}

func (m *TriggerGPIOIn) GetDebounceMillis() int64 {
	if m != nil {
		return m.DebounceMillis
	}
	return 0
}

type ActionStartBashScript struct {
	ScriptName string `protobuf:"bytes,1,opt,name=scriptName" json:"scriptName,omitempty"`
}

func (m *ActionStartBashScript) Reset()                    { *m = ActionStartBashScript{} }
func (m *ActionStartBashScript) String() string            { return proto.CompactTextString(m) }
func (*ActionStartBashScript) ProtoMessage()               {}
func (*ActionStartBashScript) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ActionStartBashScript) GetScriptName() string {
	if m != nil {
		return m.ScriptName
	}
	return ""
}

type ActionStartHIDScript struct {
	ScriptName string `protobuf:"bytes,1,opt,name=scriptName" json:"scriptName,omitempty"`
}

func (m *ActionStartHIDScript) Reset()                    { *m = ActionStartHIDScript{} }
func (m *ActionStartHIDScript) String() string            { return proto.CompactTextString(m) }
func (*ActionStartHIDScript) ProtoMessage()               {}
func (*ActionStartHIDScript) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ActionStartHIDScript) GetScriptName() string {
	if m != nil {
		return m.ScriptName
	}
	return ""
}

type ActionDeploySettingsTemplate struct {
	TemplateName string                                    `protobuf:"bytes,1,opt,name=templateName" json:"templateName,omitempty"`
	Type         ActionDeploySettingsTemplate_TemplateType `protobuf:"varint,2,opt,name=type,enum=BlackJack_grpc.ActionDeploySettingsTemplate_TemplateType" json:"type,omitempty"`
}

func (m *ActionDeploySettingsTemplate) Reset()                    { *m = ActionDeploySettingsTemplate{} }
func (m *ActionDeploySettingsTemplate) String() string            { return proto.CompactTextString(m) }
func (*ActionDeploySettingsTemplate) ProtoMessage()               {}
func (*ActionDeploySettingsTemplate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ActionDeploySettingsTemplate) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *ActionDeploySettingsTemplate) GetType() ActionDeploySettingsTemplate_TemplateType {
	if m != nil {
		return m.Type
	}
	return ActionDeploySettingsTemplate_FULL_SETTINGS
}

type ActionLog struct {
}

func (m *ActionLog) Reset()                    { *m = ActionLog{} }
func (m *ActionLog) String() string            { return proto.CompactTextString(m) }
func (*ActionLog) ProtoMessage()               {}
func (*ActionLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type ActionGPIOOut struct {
	GpioName string       `protobuf:"bytes,1,opt,name=gpio_name,json=gpioName" json:"gpio_name,omitempty"`
	Value    GPIOOutValue `protobuf:"varint,2,opt,name=value,enum=BlackJack_grpc.GPIOOutValue" json:"value,omitempty"`
}

func (m *ActionGPIOOut) Reset()                    { *m = ActionGPIOOut{} }
func (m *ActionGPIOOut) String() string            { return proto.CompactTextString(m) }
func (*ActionGPIOOut) ProtoMessage()               {}
func (*ActionGPIOOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ActionGPIOOut) GetGpioName() string {
	if m != nil {
		return m.GpioName
	}
	return ""
}

func (m *ActionGPIOOut) GetValue() GPIOOutValue {
	if m != nil {
		return m.Value
	}
	return GPIOOutValue_LOW
}

type ActionGroupSend struct {
	GroupName string `protobuf:"bytes,1,opt,name=groupName" json:"groupName,omitempty"`
	Value     int32  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *ActionGroupSend) Reset()                    { *m = ActionGroupSend{} }
func (m *ActionGroupSend) String() string            { return proto.CompactTextString(m) }
func (*ActionGroupSend) ProtoMessage()               {}
func (*ActionGroupSend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ActionGroupSend) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *ActionGroupSend) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type WifiRequestSettingsStorage struct {
	TemplateName string        `protobuf:"bytes,1,opt,name=TemplateName" json:"TemplateName,omitempty"`
	Settings     *WiFiSettings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
}

func (m *WifiRequestSettingsStorage) Reset()                    { *m = WifiRequestSettingsStorage{} }
func (m *WifiRequestSettingsStorage) String() string            { return proto.CompactTextString(m) }
func (*WifiRequestSettingsStorage) ProtoMessage()               {}
func (*WifiRequestSettingsStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *WifiRequestSettingsStorage) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *WifiRequestSettingsStorage) GetSettings() *WiFiSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type WiFiSettings struct {
	// Generic
	Name           string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Disabled       bool            `protobuf:"varint,2,opt,name=disabled" json:"disabled,omitempty"`
	Regulatory     string          `protobuf:"bytes,3,opt,name=regulatory" json:"regulatory,omitempty"`
	WorkingMode    WiFiWorkingMode `protobuf:"varint,4,opt,name=working_mode,json=workingMode,enum=BlackJack_grpc.WiFiWorkingMode" json:"working_mode,omitempty"`
	AuthMode       WiFiAuthMode    `protobuf:"varint,5,opt,name=auth_mode,json=authMode,enum=BlackJack_grpc.WiFiAuthMode" json:"auth_mode,omitempty"`
	Channel        uint32          `protobuf:"varint,6,opt,name=channel" json:"channel,omitempty"`
	Ap_BSS         *WiFiBSSCfg     `protobuf:"bytes,7,opt,name=ap_BSS,json=apBSS" json:"ap_BSS,omitempty"`
	Client_BSSList []*WiFiBSSCfg   `protobuf:"bytes,8,rep,name=client_BSS_list,json=clientBSSList" json:"client_BSS_list,omitempty"`
	HideSsid       bool            `protobuf:"varint,9,opt,name=hide_ssid,json=hideSsid" json:"hide_ssid,omitempty"`
	Nexmon         bool            `protobuf:"varint,13,opt,name=nexmon" json:"nexmon,omitempty"`
}

func (m *WiFiSettings) Reset()                    { *m = WiFiSettings{} }
func (m *WiFiSettings) String() string            { return proto.CompactTextString(m) }
func (*WiFiSettings) ProtoMessage()               {}
func (*WiFiSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *WiFiSettings) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WiFiSettings) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *WiFiSettings) GetRegulatory() string {
	if m != nil {
		return m.Regulatory
	}
	return ""
}

func (m *WiFiSettings) GetWorkingMode() WiFiWorkingMode {
	if m != nil {
		return m.WorkingMode
	}
	return WiFiWorkingMode_UNKNOWN
}

func (m *WiFiSettings) GetAuthMode() WiFiAuthMode {
	if m != nil {
		return m.AuthMode
	}
	return WiFiAuthMode_WPA2_PSK
}

func (m *WiFiSettings) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *WiFiSettings) GetAp_BSS() *WiFiBSSCfg {
	if m != nil {
		return m.Ap_BSS
	}
	return nil
}

func (m *WiFiSettings) GetClient_BSSList() []*WiFiBSSCfg {
	if m != nil {
		return m.Client_BSSList
	}
	return nil
}

func (m *WiFiSettings) GetHideSsid() bool {
	if m != nil {
		return m.HideSsid
	}
	return false
}

func (m *WiFiSettings) GetNexmon() bool {
	if m != nil {
		return m.Nexmon
	}
	return false
}

type WiFiState struct {
	Mode            WiFiStateMode `protobuf:"varint,1,opt,name=mode,enum=BlackJack_grpc.WiFiStateMode" json:"mode,omitempty"`
	Channel         uint32        `protobuf:"varint,2,opt,name=channel" json:"channel,omitempty"`
	Ssid            string        `protobuf:"bytes,3,opt,name=ssid" json:"ssid,omitempty"`
	CurrentSettings *WiFiSettings `protobuf:"bytes,4,opt,name=currentSettings" json:"currentSettings,omitempty"`
}

func (m *WiFiState) Reset()                    { *m = WiFiState{} }
func (m *WiFiState) String() string            { return proto.CompactTextString(m) }
func (*WiFiState) ProtoMessage()               {}
func (*WiFiState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *WiFiState) GetMode() WiFiStateMode {
	if m != nil {
		return m.Mode
	}
	return WiFiStateMode_STA_NOT_CONNECTED
}

func (m *WiFiState) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *WiFiState) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *WiFiState) GetCurrentSettings() *WiFiSettings {
	if m != nil {
		return m.CurrentSettings
	}
	return nil
}

type WiFiBSSCfg struct {
	SSID string `protobuf:"bytes,1,opt,name=SSID" json:"SSID,omitempty"`
	PSK  string `protobuf:"bytes,2,opt,name=PSK" json:"PSK,omitempty"`
}

func (m *WiFiBSSCfg) Reset()                    { *m = WiFiBSSCfg{} }
func (m *WiFiBSSCfg) String() string            { return proto.CompactTextString(m) }
func (*WiFiBSSCfg) ProtoMessage()               {}
func (*WiFiBSSCfg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *WiFiBSSCfg) GetSSID() string {
	if m != nil {
		return m.SSID
	}
	return ""
}

func (m *WiFiBSSCfg) GetPSK() string {
	if m != nil {
		return m.PSK
	}
	return ""
}

// Alive check
type StringMessage struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *StringMessage) Reset()                    { *m = StringMessage{} }
func (m *StringMessage) String() string            { return proto.CompactTextString(m) }
func (*StringMessage) ProtoMessage()               {}
func (*StringMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *StringMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type StringMessageArray struct {
	MsgArray []string `protobuf:"bytes,1,rep,name=msgArray" json:"msgArray,omitempty"`
}

func (m *StringMessageArray) Reset()                    { *m = StringMessageArray{} }
func (m *StringMessageArray) String() string            { return proto.CompactTextString(m) }
func (*StringMessageArray) ProtoMessage()               {}
func (*StringMessageArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *StringMessageArray) GetMsgArray() []string {
	if m != nil {
		return m.MsgArray
	}
	return nil
}

// Events
type EventRequest struct {
	ListenType int64 `protobuf:"varint,1,opt,name=listenType" json:"listenType,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *EventRequest) GetListenType() int64 {
	if m != nil {
		return m.ListenType
	}
	return 0
}

type EventValue struct {
	// Types that are valid to be assigned to Val:
	//	*EventValue_Tstring
	//	*EventValue_Tbool
	//	*EventValue_Tint64
	Val isEventValue_Val `protobuf_oneof:"val"`
}

func (m *EventValue) Reset()                    { *m = EventValue{} }
func (m *EventValue) String() string            { return proto.CompactTextString(m) }
func (*EventValue) ProtoMessage()               {}
func (*EventValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type isEventValue_Val interface {
	isEventValue_Val()
}

type EventValue_Tstring struct {
	Tstring string `protobuf:"bytes,1,opt,name=tstring,oneof"`
}
type EventValue_Tbool struct {
	Tbool bool `protobuf:"varint,2,opt,name=tbool,oneof"`
}
type EventValue_Tint64 struct {
	Tint64 int64 `protobuf:"varint,3,opt,name=tint64,oneof"`
}

func (*EventValue_Tstring) isEventValue_Val() {}
func (*EventValue_Tbool) isEventValue_Val()   {}
func (*EventValue_Tint64) isEventValue_Val()  {}

func (m *EventValue) GetVal() isEventValue_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *EventValue) GetTstring() string {
	if x, ok := m.GetVal().(*EventValue_Tstring); ok {
		return x.Tstring
	}
	return ""
}

func (m *EventValue) GetTbool() bool {
	if x, ok := m.GetVal().(*EventValue_Tbool); ok {
		return x.Tbool
	}
	return false
}

func (m *EventValue) GetTint64() int64 {
	if x, ok := m.GetVal().(*EventValue_Tint64); ok {
		return x.Tint64
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EventValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EventValue_OneofMarshaler, _EventValue_OneofUnmarshaler, _EventValue_OneofSizer, []interface{}{
		(*EventValue_Tstring)(nil),
		(*EventValue_Tbool)(nil),
		(*EventValue_Tint64)(nil),
	}
}

func _EventValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EventValue)
	// val
	switch x := m.Val.(type) {
	case *EventValue_Tstring:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Tstring)
	case *EventValue_Tbool:
		t := uint64(0)
		if x.Tbool {
			t = 1
		}
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *EventValue_Tint64:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Tint64))
	case nil:
	default:
		return fmt.Errorf("EventValue.Val has unexpected type %T", x)
	}
	return nil
}

func _EventValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EventValue)
	switch tag {
	case 1: // val.tstring
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Val = &EventValue_Tstring{x}
		return true, err
	case 2: // val.tbool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Val = &EventValue_Tbool{x != 0}
		return true, err
	case 3: // val.tint64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Val = &EventValue_Tint64{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _EventValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EventValue)
	// val
	switch x := m.Val.(type) {
	case *EventValue_Tstring:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Tstring)))
		n += len(x.Tstring)
	case *EventValue_Tbool:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += 1
	case *EventValue_Tint64:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Tint64))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Event struct {
	Type   int64         `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Values []*EventValue `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Event) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Event) GetValues() []*EventValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// File System
type TempDirOrFileRequest struct {
	Dir        string `protobuf:"bytes,1,opt,name=dir" json:"dir,omitempty"`
	Prefix     string `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
	OnlyFolder bool   `protobuf:"varint,3,opt,name=onlyFolder" json:"onlyFolder,omitempty"`
}

func (m *TempDirOrFileRequest) Reset()                    { *m = TempDirOrFileRequest{} }
func (m *TempDirOrFileRequest) String() string            { return proto.CompactTextString(m) }
func (*TempDirOrFileRequest) ProtoMessage()               {}
func (*TempDirOrFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *TempDirOrFileRequest) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *TempDirOrFileRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *TempDirOrFileRequest) GetOnlyFolder() bool {
	if m != nil {
		return m.OnlyFolder
	}
	return false
}

type TempDirOrFileResponse struct {
	ResultPath string `protobuf:"bytes,1,opt,name=resultPath" json:"resultPath,omitempty"`
}

func (m *TempDirOrFileResponse) Reset()                    { *m = TempDirOrFileResponse{} }
func (m *TempDirOrFileResponse) String() string            { return proto.CompactTextString(m) }
func (*TempDirOrFileResponse) ProtoMessage()               {}
func (*TempDirOrFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *TempDirOrFileResponse) GetResultPath() string {
	if m != nil {
		return m.ResultPath
	}
	return ""
}

type ReadFileRequest struct {
	Folder   AccessibleFolder `protobuf:"varint,1,opt,name=folder,enum=BlackJack_grpc.AccessibleFolder" json:"folder,omitempty"`
	Filename string           `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	Start    int64            `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	Len      int64            `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
}

func (m *ReadFileRequest) Reset()                    { *m = ReadFileRequest{} }
func (m *ReadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadFileRequest) ProtoMessage()               {}
func (*ReadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ReadFileRequest) GetFolder() AccessibleFolder {
	if m != nil {
		return m.Folder
	}
	return AccessibleFolder_TMP
}

func (m *ReadFileRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ReadFileRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReadFileRequest) GetLen() int64 {
	if m != nil {
		return m.Len
	}
	return 0
}

type ReadFileResponse struct {
	ReadCount int64  `protobuf:"varint,1,opt,name=readCount" json:"readCount,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReadFileResponse) Reset()                    { *m = ReadFileResponse{} }
func (m *ReadFileResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadFileResponse) ProtoMessage()               {}
func (*ReadFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ReadFileResponse) GetReadCount() int64 {
	if m != nil {
		return m.ReadCount
	}
	return 0
}

func (m *ReadFileResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WriteFileRequest struct {
	Folder       AccessibleFolder `protobuf:"varint,1,opt,name=folder,enum=BlackJack_grpc.AccessibleFolder" json:"folder,omitempty"`
	Filename     string           `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
	Append       bool             `protobuf:"varint,3,opt,name=append" json:"append,omitempty"`
	MustNotExist bool             `protobuf:"varint,4,opt,name=mustNotExist" json:"mustNotExist,omitempty"`
	Data         []byte           `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *WriteFileRequest) Reset()                    { *m = WriteFileRequest{} }
func (m *WriteFileRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteFileRequest) ProtoMessage()               {}
func (*WriteFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *WriteFileRequest) GetFolder() AccessibleFolder {
	if m != nil {
		return m.Folder
	}
	return AccessibleFolder_TMP
}

func (m *WriteFileRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *WriteFileRequest) GetAppend() bool {
	if m != nil {
		return m.Append
	}
	return false
}

func (m *WriteFileRequest) GetMustNotExist() bool {
	if m != nil {
		return m.MustNotExist
	}
	return false
}

func (m *WriteFileRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FileInfoRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *FileInfoRequest) Reset()                    { *m = FileInfoRequest{} }
func (m *FileInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*FileInfoRequest) ProtoMessage()               {}
func (*FileInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *FileInfoRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type FileInfoResponse struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size    int64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Mode    uint32 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
	ModTime int64  `protobuf:"varint,4,opt,name=modTime" json:"modTime,omitempty"`
	IsDir   bool   `protobuf:"varint,5,opt,name=isDir" json:"isDir,omitempty"`
}

func (m *FileInfoResponse) Reset()                    { *m = FileInfoResponse{} }
func (m *FileInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*FileInfoResponse) ProtoMessage()               {}
func (*FileInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *FileInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileInfoResponse) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileInfoResponse) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *FileInfoResponse) GetModTime() int64 {
	if m != nil {
		return m.ModTime
	}
	return 0
}

func (m *FileInfoResponse) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

// HID
type HIDScriptRequest struct {
	ScriptPath     string `protobuf:"bytes,1,opt,name=scriptPath" json:"scriptPath,omitempty"`
	TimeoutSeconds uint32 `protobuf:"varint,2,opt,name=timeoutSeconds" json:"timeoutSeconds,omitempty"`
}

func (m *HIDScriptRequest) Reset()                    { *m = HIDScriptRequest{} }
func (m *HIDScriptRequest) String() string            { return proto.CompactTextString(m) }
func (*HIDScriptRequest) ProtoMessage()               {}
func (*HIDScriptRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *HIDScriptRequest) GetScriptPath() string {
	if m != nil {
		return m.ScriptPath
	}
	return ""
}

func (m *HIDScriptRequest) GetTimeoutSeconds() uint32 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

type HIDScriptJob struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *HIDScriptJob) Reset()                    { *m = HIDScriptJob{} }
func (m *HIDScriptJob) String() string            { return proto.CompactTextString(m) }
func (*HIDScriptJob) ProtoMessage()               {}
func (*HIDScriptJob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *HIDScriptJob) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type HIDScriptJobList struct {
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *HIDScriptJobList) Reset()                    { *m = HIDScriptJobList{} }
func (m *HIDScriptJobList) String() string            { return proto.CompactTextString(m) }
func (*HIDScriptJobList) ProtoMessage()               {}
func (*HIDScriptJobList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *HIDScriptJobList) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type HIDRunningJobStateResult struct {
	Id     int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	VmId   int64  `protobuf:"varint,2,opt,name=vmId" json:"vmId,omitempty"`
	Source string `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
}

func (m *HIDRunningJobStateResult) Reset()                    { *m = HIDRunningJobStateResult{} }
func (m *HIDRunningJobStateResult) String() string            { return proto.CompactTextString(m) }
func (*HIDRunningJobStateResult) ProtoMessage()               {}
func (*HIDRunningJobStateResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *HIDRunningJobStateResult) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HIDRunningJobStateResult) GetVmId() int64 {
	if m != nil {
		return m.VmId
	}
	return 0
}

func (m *HIDRunningJobStateResult) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type HIDScriptResult struct {
	Job        *HIDScriptJob `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	IsFinished bool          `protobuf:"varint,2,opt,name=isFinished" json:"isFinished,omitempty"`
	ResultJson string        `protobuf:"bytes,3,opt,name=resultJson" json:"resultJson,omitempty"`
}

func (m *HIDScriptResult) Reset()                    { *m = HIDScriptResult{} }
func (m *HIDScriptResult) String() string            { return proto.CompactTextString(m) }
func (*HIDScriptResult) ProtoMessage()               {}
func (*HIDScriptResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *HIDScriptResult) GetJob() *HIDScriptJob {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *HIDScriptResult) GetIsFinished() bool {
	if m != nil {
		return m.IsFinished
	}
	return false
}

func (m *HIDScriptResult) GetResultJson() string {
	if m != nil {
		return m.ResultJson
	}
	return ""
}

// LED
type LEDSettings struct {
	BlinkCount uint32 `protobuf:"varint,1,opt,name=blink_count,json=blinkCount" json:"blink_count,omitempty"`
}

func (m *LEDSettings) Reset()                    { *m = LEDSettings{} }
func (m *LEDSettings) String() string            { return proto.CompactTextString(m) }
func (*LEDSettings) ProtoMessage()               {}
func (*LEDSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *LEDSettings) GetBlinkCount() uint32 {
	if m != nil {
		return m.BlinkCount
	}
	return 0
}

// USB Gadget
type USBRequestSettingsStorage struct {
	TemplateName string          `protobuf:"bytes,1,opt,name=TemplateName" json:"TemplateName,omitempty"`
	Settings     *GadgetSettings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
}

func (m *USBRequestSettingsStorage) Reset()                    { *m = USBRequestSettingsStorage{} }
func (m *USBRequestSettingsStorage) String() string            { return proto.CompactTextString(m) }
func (*USBRequestSettingsStorage) ProtoMessage()               {}
func (*USBRequestSettingsStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *USBRequestSettingsStorage) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *USBRequestSettingsStorage) GetSettings() *GadgetSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type GadgetSettings struct {
	Enabled          bool                    `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	Vid              string                  `protobuf:"bytes,2,opt,name=vid" json:"vid,omitempty"`
	Pid              string                  `protobuf:"bytes,3,opt,name=pid" json:"pid,omitempty"`
	Manufacturer     string                  `protobuf:"bytes,4,opt,name=manufacturer" json:"manufacturer,omitempty"`
	Product          string                  `protobuf:"bytes,5,opt,name=product" json:"product,omitempty"`
	Serial           string                  `protobuf:"bytes,6,opt,name=serial" json:"serial,omitempty"`
	Use_CDC_ECM      bool                    `protobuf:"varint,7,opt,name=use_CDC_ECM,json=useCDCECM" json:"use_CDC_ECM,omitempty"`
	Use_RNDIS        bool                    `protobuf:"varint,8,opt,name=use_RNDIS,json=useRNDIS" json:"use_RNDIS,omitempty"`
	Use_HID_KEYBOARD bool                    `protobuf:"varint,9,opt,name=use_HID_KEYBOARD,json=useHIDKEYBOARD" json:"use_HID_KEYBOARD,omitempty"`
	Use_HID_MOUSE    bool                    `protobuf:"varint,10,opt,name=use_HID_MOUSE,json=useHIDMOUSE" json:"use_HID_MOUSE,omitempty"`
	Use_HID_RAW      bool                    `protobuf:"varint,11,opt,name=use_HID_RAW,json=useHIDRAW" json:"use_HID_RAW,omitempty"`
	Use_UMS          bool                    `protobuf:"varint,12,opt,name=use_UMS,json=useUMS" json:"use_UMS,omitempty"`
	Use_SERIAL       bool                    `protobuf:"varint,13,opt,name=use_SERIAL,json=useSERIAL" json:"use_SERIAL,omitempty"`
	RndisSettings    *GadgetSettingsEthernet `protobuf:"bytes,14,opt,name=rndis_settings,json=rndisSettings" json:"rndis_settings,omitempty"`
	CdcEcmSettings   *GadgetSettingsEthernet `protobuf:"bytes,15,opt,name=cdc_ecm_settings,json=cdcEcmSettings" json:"cdc_ecm_settings,omitempty"`
	UmsSettings      *GadgetSettingsUMS      `protobuf:"bytes,16,opt,name=ums_settings,json=umsSettings" json:"ums_settings,omitempty"`
	// EthernetInterfaceSettings ethernet_settings = 17; //only applicable if RNDIS or CDC ECM on
	DevPathHidKeyboard string `protobuf:"bytes,18,opt,name=dev_path_hid_keyboard,json=devPathHidKeyboard" json:"dev_path_hid_keyboard,omitempty"`
	DevPathHidMouse    string `protobuf:"bytes,19,opt,name=dev_path_hid_mouse,json=devPathHidMouse" json:"dev_path_hid_mouse,omitempty"`
	DevPathHidRaw      string `protobuf:"bytes,20,opt,name=dev_path_hid_raw,json=devPathHidRaw" json:"dev_path_hid_raw,omitempty"`
}

func (m *GadgetSettings) Reset()                    { *m = GadgetSettings{} }
func (m *GadgetSettings) String() string            { return proto.CompactTextString(m) }
func (*GadgetSettings) ProtoMessage()               {}
func (*GadgetSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *GadgetSettings) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *GadgetSettings) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *GadgetSettings) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *GadgetSettings) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *GadgetSettings) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *GadgetSettings) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *GadgetSettings) GetUse_CDC_ECM() bool {
	if m != nil {
		return m.Use_CDC_ECM
	}
	return false
}

func (m *GadgetSettings) GetUse_RNDIS() bool {
	if m != nil {
		return m.Use_RNDIS
	}
	return false
}

func (m *GadgetSettings) GetUse_HID_KEYBOARD() bool {
	if m != nil {
		return m.Use_HID_KEYBOARD
	}
	return false
}

func (m *GadgetSettings) GetUse_HID_MOUSE() bool {
	if m != nil {
		return m.Use_HID_MOUSE
	}
	return false
}

func (m *GadgetSettings) GetUse_HID_RAW() bool {
	if m != nil {
		return m.Use_HID_RAW
	}
	return false
}

func (m *GadgetSettings) GetUse_UMS() bool {
	if m != nil {
		return m.Use_UMS
	}
	return false
}

func (m *GadgetSettings) GetUse_SERIAL() bool {
	if m != nil {
		return m.Use_SERIAL
	}
	return false
}

func (m *GadgetSettings) GetRndisSettings() *GadgetSettingsEthernet {
	if m != nil {
		return m.RndisSettings
	}
	return nil
}

func (m *GadgetSettings) GetCdcEcmSettings() *GadgetSettingsEthernet {
	if m != nil {
		return m.CdcEcmSettings
	}
	return nil
}

func (m *GadgetSettings) GetUmsSettings() *GadgetSettingsUMS {
	if m != nil {
		return m.UmsSettings
	}
	return nil
}

func (m *GadgetSettings) GetDevPathHidKeyboard() string {
	if m != nil {
		return m.DevPathHidKeyboard
	}
	return ""
}

func (m *GadgetSettings) GetDevPathHidMouse() string {
	if m != nil {
		return m.DevPathHidMouse
	}
	return ""
}

func (m *GadgetSettings) GetDevPathHidRaw() string {
	if m != nil {
		return m.DevPathHidRaw
	}
	return ""
}

type GadgetSettingsEthernet struct {
	HostAddr string `protobuf:"bytes,1,opt,name=host_addr,json=hostAddr" json:"host_addr,omitempty"`
	DevAddr  string `protobuf:"bytes,2,opt,name=dev_addr,json=devAddr" json:"dev_addr,omitempty"`
}

func (m *GadgetSettingsEthernet) Reset()                    { *m = GadgetSettingsEthernet{} }
func (m *GadgetSettingsEthernet) String() string            { return proto.CompactTextString(m) }
func (*GadgetSettingsEthernet) ProtoMessage()               {}
func (*GadgetSettingsEthernet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *GadgetSettingsEthernet) GetHostAddr() string {
	if m != nil {
		return m.HostAddr
	}
	return ""
}

func (m *GadgetSettingsEthernet) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

type GadgetSettingsUMS struct {
	Cdrom bool   `protobuf:"varint,1,opt,name=cdrom" json:"cdrom,omitempty"`
	File  string `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
}

func (m *GadgetSettingsUMS) Reset()                    { *m = GadgetSettingsUMS{} }
func (m *GadgetSettingsUMS) String() string            { return proto.CompactTextString(m) }
func (*GadgetSettingsUMS) ProtoMessage()               {}
func (*GadgetSettingsUMS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *GadgetSettingsUMS) GetCdrom() bool {
	if m != nil {
		return m.Cdrom
	}
	return false
}

func (m *GadgetSettingsUMS) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

// Ethernet Interface Settings
type EthernetRequestSettingsStorage struct {
	TemplateName string                     `protobuf:"bytes,1,opt,name=TemplateName" json:"TemplateName,omitempty"`
	Settings     *EthernetInterfaceSettings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
}

func (m *EthernetRequestSettingsStorage) Reset()                    { *m = EthernetRequestSettingsStorage{} }
func (m *EthernetRequestSettingsStorage) String() string            { return proto.CompactTextString(m) }
func (*EthernetRequestSettingsStorage) ProtoMessage()               {}
func (*EthernetRequestSettingsStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *EthernetRequestSettingsStorage) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *EthernetRequestSettingsStorage) GetSettings() *EthernetInterfaceSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type DeployedEthernetInterfaceSettings struct {
	List []*EthernetInterfaceSettings `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *DeployedEthernetInterfaceSettings) Reset()         { *m = DeployedEthernetInterfaceSettings{} }
func (m *DeployedEthernetInterfaceSettings) String() string { return proto.CompactTextString(m) }
func (*DeployedEthernetInterfaceSettings) ProtoMessage()    {}
func (*DeployedEthernetInterfaceSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{53}
}

func (m *DeployedEthernetInterfaceSettings) GetList() []*EthernetInterfaceSettings {
	if m != nil {
		return m.List
	}
	return nil
}

type EthernetInterfaceSettings struct {
	Name               string                         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Mode               EthernetInterfaceSettings_Mode `protobuf:"varint,2,opt,name=mode,enum=BlackJack_grpc.EthernetInterfaceSettings_Mode" json:"mode,omitempty"`
	IpAddress4         string                         `protobuf:"bytes,3,opt,name=ipAddress4" json:"ipAddress4,omitempty"`
	Netmask4           string                         `protobuf:"bytes,4,opt,name=netmask4" json:"netmask4,omitempty"`
	Enabled            bool                           `protobuf:"varint,5,opt,name=enabled" json:"enabled,omitempty"`
	DhcpServerSettings *DHCPServerSettings            `protobuf:"bytes,6,opt,name=dhcpServerSettings" json:"dhcpServerSettings,omitempty"`
	SettingsInUse      bool                           `protobuf:"varint,7,opt,name=settingsInUse" json:"settingsInUse,omitempty"`
}

func (m *EthernetInterfaceSettings) Reset()                    { *m = EthernetInterfaceSettings{} }
func (m *EthernetInterfaceSettings) String() string            { return proto.CompactTextString(m) }
func (*EthernetInterfaceSettings) ProtoMessage()               {}
func (*EthernetInterfaceSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *EthernetInterfaceSettings) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EthernetInterfaceSettings) GetMode() EthernetInterfaceSettings_Mode {
	if m != nil {
		return m.Mode
	}
	return EthernetInterfaceSettings_MANUAL
}

func (m *EthernetInterfaceSettings) GetIpAddress4() string {
	if m != nil {
		return m.IpAddress4
	}
	return ""
}

func (m *EthernetInterfaceSettings) GetNetmask4() string {
	if m != nil {
		return m.Netmask4
	}
	return ""
}

func (m *EthernetInterfaceSettings) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *EthernetInterfaceSettings) GetDhcpServerSettings() *DHCPServerSettings {
	if m != nil {
		return m.DhcpServerSettings
	}
	return nil
}

func (m *EthernetInterfaceSettings) GetSettingsInUse() bool {
	if m != nil {
		return m.SettingsInUse
	}
	return false
}

// DHCP
type DHCPServerSettings struct {
	ListenPort         uint32             `protobuf:"varint,1,opt,name=listenPort" json:"listenPort,omitempty"`
	ListenInterface    string             `protobuf:"bytes,2,opt,name=listenInterface" json:"listenInterface,omitempty"`
	LeaseFile          string             `protobuf:"bytes,3,opt,name=leaseFile" json:"leaseFile,omitempty"`
	NotAuthoritative   bool               `protobuf:"varint,4,opt,name=notAuthoritative" json:"notAuthoritative,omitempty"`
	DoNotBindInterface bool               `protobuf:"varint,5,opt,name=doNotBindInterface" json:"doNotBindInterface,omitempty"`
	CallbackScript     string             `protobuf:"bytes,6,opt,name=callbackScript" json:"callbackScript,omitempty"`
	Ranges             []*DHCPServerRange `protobuf:"bytes,7,rep,name=ranges" json:"ranges,omitempty"`
	// repeated DHCPServerOption options = 8;
	Options     map[uint32]string       `protobuf:"bytes,8,rep,name=options" json:"options,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StaticHosts []*DHCPServerStaticHost `protobuf:"bytes,9,rep,name=staticHosts" json:"staticHosts,omitempty"`
}

func (m *DHCPServerSettings) Reset()                    { *m = DHCPServerSettings{} }
func (m *DHCPServerSettings) String() string            { return proto.CompactTextString(m) }
func (*DHCPServerSettings) ProtoMessage()               {}
func (*DHCPServerSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *DHCPServerSettings) GetListenPort() uint32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *DHCPServerSettings) GetListenInterface() string {
	if m != nil {
		return m.ListenInterface
	}
	return ""
}

func (m *DHCPServerSettings) GetLeaseFile() string {
	if m != nil {
		return m.LeaseFile
	}
	return ""
}

func (m *DHCPServerSettings) GetNotAuthoritative() bool {
	if m != nil {
		return m.NotAuthoritative
	}
	return false
}

func (m *DHCPServerSettings) GetDoNotBindInterface() bool {
	if m != nil {
		return m.DoNotBindInterface
	}
	return false
}

func (m *DHCPServerSettings) GetCallbackScript() string {
	if m != nil {
		return m.CallbackScript
	}
	return ""
}

func (m *DHCPServerSettings) GetRanges() []*DHCPServerRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *DHCPServerSettings) GetOptions() map[uint32]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *DHCPServerSettings) GetStaticHosts() []*DHCPServerStaticHost {
	if m != nil {
		return m.StaticHosts
	}
	return nil
}

// Could be used for IPv4 or IPv6 (refer dnsmasq docs), nor field for prefix length (default is 64)
type DHCPServerRange struct {
	RangeLower string `protobuf:"bytes,1,opt,name=rangeLower" json:"rangeLower,omitempty"`
	RangeUpper string `protobuf:"bytes,2,opt,name=rangeUpper" json:"rangeUpper,omitempty"`
	LeaseTime  string `protobuf:"bytes,3,opt,name=leaseTime" json:"leaseTime,omitempty"`
}

func (m *DHCPServerRange) Reset()                    { *m = DHCPServerRange{} }
func (m *DHCPServerRange) String() string            { return proto.CompactTextString(m) }
func (*DHCPServerRange) ProtoMessage()               {}
func (*DHCPServerRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *DHCPServerRange) GetRangeLower() string {
	if m != nil {
		return m.RangeLower
	}
	return ""
}

func (m *DHCPServerRange) GetRangeUpper() string {
	if m != nil {
		return m.RangeUpper
	}
	return ""
}

func (m *DHCPServerRange) GetLeaseTime() string {
	if m != nil {
		return m.LeaseTime
	}
	return ""
}

// Used for static leases
type DHCPServerStaticHost struct {
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	Ip  string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
}

func (m *DHCPServerStaticHost) Reset()                    { *m = DHCPServerStaticHost{} }
func (m *DHCPServerStaticHost) String() string            { return proto.CompactTextString(m) }
func (*DHCPServerStaticHost) ProtoMessage()               {}
func (*DHCPServerStaticHost) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *DHCPServerStaticHost) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *DHCPServerStaticHost) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func init() {
	proto.RegisterType((*MasterTemplate)(nil), "BlackJack_grpc.MasterTemplate")
	proto.RegisterType((*RequestMasterTemplateStorage)(nil), "BlackJack_grpc.RequestMasterTemplateStorage")
	proto.RegisterType((*BluetoothRequestSettingsStorage)(nil), "BlackJack_grpc.BluetoothRequestSettingsStorage")
	proto.RegisterType((*BluetoothSettings)(nil), "BlackJack_grpc.BluetoothSettings")
	proto.RegisterType((*BluetoothAgentSettings)(nil), "BlackJack_grpc.BluetoothAgentSettings")
	proto.RegisterType((*BluetoothNetworkService)(nil), "BlackJack_grpc.BluetoothNetworkService")
	proto.RegisterType((*BluetoothControllerSettings)(nil), "BlackJack_grpc.BluetoothControllerSettings")
	proto.RegisterType((*BluetoothControllerInformation)(nil), "BlackJack_grpc.BluetoothControllerInformation")
	proto.RegisterType((*TriggerActionSet)(nil), "BlackJack_grpc.TriggerActionSet")
	proto.RegisterType((*TriggerAction)(nil), "BlackJack_grpc.TriggerAction")
	proto.RegisterType((*TriggerServiceStarted)(nil), "BlackJack_grpc.TriggerServiceStarted")
	proto.RegisterType((*TriggerUSBGadgetConnected)(nil), "BlackJack_grpc.TriggerUSBGadgetConnected")
	proto.RegisterType((*TriggerUSBGadgetDisconnected)(nil), "BlackJack_grpc.TriggerUSBGadgetDisconnected")
	proto.RegisterType((*TriggerWifiAPStarted)(nil), "BlackJack_grpc.TriggerWifiAPStarted")
	proto.RegisterType((*TriggerWifiConnectedAsSta)(nil), "BlackJack_grpc.TriggerWifiConnectedAsSta")
	proto.RegisterType((*TriggerSSHLogin)(nil), "BlackJack_grpc.TriggerSSHLogin")
	proto.RegisterType((*TriggerDHCPLeaseGranted)(nil), "BlackJack_grpc.TriggerDHCPLeaseGranted")
	proto.RegisterType((*TriggerGroupReceive)(nil), "BlackJack_grpc.TriggerGroupReceive")
	proto.RegisterType((*TriggerGroupReceiveMulti)(nil), "BlackJack_grpc.TriggerGroupReceiveMulti")
	proto.RegisterType((*TriggerGPIOIn)(nil), "BlackJack_grpc.TriggerGPIOIn")
	proto.RegisterType((*ActionStartBashScript)(nil), "BlackJack_grpc.ActionStartBashScript")
	proto.RegisterType((*ActionStartHIDScript)(nil), "BlackJack_grpc.ActionStartHIDScript")
	proto.RegisterType((*ActionDeploySettingsTemplate)(nil), "BlackJack_grpc.ActionDeploySettingsTemplate")
	proto.RegisterType((*ActionLog)(nil), "BlackJack_grpc.ActionLog")
	proto.RegisterType((*ActionGPIOOut)(nil), "BlackJack_grpc.ActionGPIOOut")
	proto.RegisterType((*ActionGroupSend)(nil), "BlackJack_grpc.ActionGroupSend")
	proto.RegisterType((*WifiRequestSettingsStorage)(nil), "BlackJack_grpc.WifiRequestSettingsStorage")
	proto.RegisterType((*WiFiSettings)(nil), "BlackJack_grpc.WiFiSettings")
	proto.RegisterType((*WiFiState)(nil), "BlackJack_grpc.WiFiState")
	proto.RegisterType((*WiFiBSSCfg)(nil), "BlackJack_grpc.WiFiBSSCfg")
	proto.RegisterType((*StringMessage)(nil), "BlackJack_grpc.StringMessage")
	proto.RegisterType((*StringMessageArray)(nil), "BlackJack_grpc.StringMessageArray")
	proto.RegisterType((*EventRequest)(nil), "BlackJack_grpc.EventRequest")
	proto.RegisterType((*EventValue)(nil), "BlackJack_grpc.EventValue")
	proto.RegisterType((*Event)(nil), "BlackJack_grpc.Event")
	proto.RegisterType((*TempDirOrFileRequest)(nil), "BlackJack_grpc.TempDirOrFileRequest")
	proto.RegisterType((*TempDirOrFileResponse)(nil), "BlackJack_grpc.TempDirOrFileResponse")
	proto.RegisterType((*ReadFileRequest)(nil), "BlackJack_grpc.ReadFileRequest")
	proto.RegisterType((*ReadFileResponse)(nil), "BlackJack_grpc.ReadFileResponse")
	proto.RegisterType((*WriteFileRequest)(nil), "BlackJack_grpc.WriteFileRequest")
	proto.RegisterType((*FileInfoRequest)(nil), "BlackJack_grpc.FileInfoRequest")
	proto.RegisterType((*FileInfoResponse)(nil), "BlackJack_grpc.FileInfoResponse")
	proto.RegisterType((*HIDScriptRequest)(nil), "BlackJack_grpc.HIDScriptRequest")
	proto.RegisterType((*HIDScriptJob)(nil), "BlackJack_grpc.HIDScriptJob")
	proto.RegisterType((*HIDScriptJobList)(nil), "BlackJack_grpc.HIDScriptJobList")
	proto.RegisterType((*HIDRunningJobStateResult)(nil), "BlackJack_grpc.HIDRunningJobStateResult")
	proto.RegisterType((*HIDScriptResult)(nil), "BlackJack_grpc.HIDScriptResult")
	proto.RegisterType((*LEDSettings)(nil), "BlackJack_grpc.LEDSettings")
	proto.RegisterType((*USBRequestSettingsStorage)(nil), "BlackJack_grpc.USBRequestSettingsStorage")
	proto.RegisterType((*GadgetSettings)(nil), "BlackJack_grpc.GadgetSettings")
	proto.RegisterType((*GadgetSettingsEthernet)(nil), "BlackJack_grpc.GadgetSettingsEthernet")
	proto.RegisterType((*GadgetSettingsUMS)(nil), "BlackJack_grpc.GadgetSettingsUMS")
	proto.RegisterType((*EthernetRequestSettingsStorage)(nil), "BlackJack_grpc.EthernetRequestSettingsStorage")
	proto.RegisterType((*DeployedEthernetInterfaceSettings)(nil), "BlackJack_grpc.DeployedEthernetInterfaceSettings")
	proto.RegisterType((*EthernetInterfaceSettings)(nil), "BlackJack_grpc.EthernetInterfaceSettings")
	proto.RegisterType((*DHCPServerSettings)(nil), "BlackJack_grpc.DHCPServerSettings")
	proto.RegisterType((*DHCPServerRange)(nil), "BlackJack_grpc.DHCPServerRange")
	proto.RegisterType((*DHCPServerStaticHost)(nil), "BlackJack_grpc.DHCPServerStaticHost")
	proto.RegisterType((*Empty)(nil), "BlackJack_grpc.Empty")
	proto.RegisterEnum("BlackJack_grpc.BluetoothNetworkServiceType", BluetoothNetworkServiceType_name, BluetoothNetworkServiceType_value)
	proto.RegisterEnum("BlackJack_grpc.GroupReceiveMultiType", GroupReceiveMultiType_name, GroupReceiveMultiType_value)
	proto.RegisterEnum("BlackJack_grpc.GPIOInPullUpDown", GPIOInPullUpDown_name, GPIOInPullUpDown_value)
	proto.RegisterEnum("BlackJack_grpc.GPIOInEdge", GPIOInEdge_name, GPIOInEdge_value)
	proto.RegisterEnum("BlackJack_grpc.GPIOOutValue", GPIOOutValue_name, GPIOOutValue_value)
	proto.RegisterEnum("BlackJack_grpc.WiFiWorkingMode", WiFiWorkingMode_name, WiFiWorkingMode_value)
	proto.RegisterEnum("BlackJack_grpc.WiFiStateMode", WiFiStateMode_name, WiFiStateMode_value)
	proto.RegisterEnum("BlackJack_grpc.WiFiAuthMode", WiFiAuthMode_name, WiFiAuthMode_value)
	proto.RegisterEnum("BlackJack_grpc.AccessibleFolder", AccessibleFolder_name, AccessibleFolder_value)
	proto.RegisterEnum("BlackJack_grpc.ActionDeploySettingsTemplate_TemplateType", ActionDeploySettingsTemplate_TemplateType_name, ActionDeploySettingsTemplate_TemplateType_value)
	proto.RegisterEnum("BlackJack_grpc.EthernetInterfaceSettings_Mode", EthernetInterfaceSettings_Mode_name, EthernetInterfaceSettings_Mode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BlackJack service

type BlackJackClient interface {
	// Bluetooth
	GetBluetoothControllerInformation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BluetoothControllerInformation, error)
	DeployBluetoothControllerInformation(ctx context.Context, in *BluetoothControllerInformation, opts ...grpc.CallOption) (*BluetoothControllerInformation, error)
	GetBluetoothAgentSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BluetoothAgentSettings, error)
	DeployBluetoothAgentSettings(ctx context.Context, in *BluetoothAgentSettings, opts ...grpc.CallOption) (*BluetoothAgentSettings, error)
	SetBluetoothNetworkService(ctx context.Context, in *BluetoothNetworkService, opts ...grpc.CallOption) (*Empty, error)
	DeployBluetoothSettings(ctx context.Context, in *BluetoothSettings, opts ...grpc.CallOption) (*BluetoothSettings, error)
	StoreBluetoothSettings(ctx context.Context, in *BluetoothRequestSettingsStorage, opts ...grpc.CallOption) (*Empty, error)
	GetStoredBluetoothSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*BluetoothSettings, error)
	DeployStoredBluetoothSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*BluetoothSettings, error)
	DeleteStoredBluetoothSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	StoreDeployedBluetoothSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	ListStoredBluetoothSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error)
	// USB gadget
	GetDeployedGadgetSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error)
	DeployGadgetSetting(ctx context.Context, in *GadgetSettings, opts ...grpc.CallOption) (*GadgetSettings, error)
	GetLEDSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LEDSettings, error)
	SetLEDSettings(ctx context.Context, in *LEDSettings, opts ...grpc.CallOption) (*Empty, error)
	MountUMSFile(ctx context.Context, in *GadgetSettingsUMS, opts ...grpc.CallOption) (*Empty, error)
	StoreUSBSettings(ctx context.Context, in *USBRequestSettingsStorage, opts ...grpc.CallOption) (*Empty, error)
	GetStoredUSBSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*GadgetSettings, error)
	DeployStoredUSBSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*GadgetSettings, error)
	DeleteStoredUSBSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	StoreDeployedUSBSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	ListStoredUSBSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error)
	ListUmsImageCdrom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error)
	ListUmsImageFlashdrive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error)
	// HIDScript / job management
	HIDRunScript(ctx context.Context, in *HIDScriptRequest, opts ...grpc.CallOption) (*HIDScriptResult, error)
	HIDRunScriptJob(ctx context.Context, in *HIDScriptRequest, opts ...grpc.CallOption) (*HIDScriptJob, error)
	HIDGetScriptJobResult(ctx context.Context, in *HIDScriptJob, opts ...grpc.CallOption) (*HIDScriptResult, error)
	HIDCancelScriptJob(ctx context.Context, in *HIDScriptJob, opts ...grpc.CallOption) (*Empty, error)
	HIDGetRunningScriptJobs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HIDScriptJobList, error)
	HIDCancelAllScriptJobs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	HIDGetRunningJobState(ctx context.Context, in *HIDScriptJob, opts ...grpc.CallOption) (*HIDRunningJobStateResult, error)
	// FileSystem
	FSWriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*Empty, error)
	FSReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error)
	FSGetFileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileInfoResponse, error)
	FSCreateTempDirOrFile(ctx context.Context, in *TempDirOrFileRequest, opts ...grpc.CallOption) (*TempDirOrFileResponse, error)
	// Events
	EventListen(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (BlackJack_EventListenClient, error)
	// Alive check
	EchoRequest(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
	// WiFi
	DeployWiFiSettings(ctx context.Context, in *WiFiSettings, opts ...grpc.CallOption) (*WiFiState, error)
	GetWiFiState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WiFiState, error)
	ListenWiFiStateChanges(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WiFiState, error)
	StoreWifiSettings(ctx context.Context, in *WifiRequestSettingsStorage, opts ...grpc.CallOption) (*Empty, error)
	GetStoredWifiSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*WiFiSettings, error)
	DeployStoredWifiSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*WiFiState, error)
	DeleteStoredWifiSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	StoreDeployedWifiSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	ListStoredWifiSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error)
	// Ethernet
	DeployEthernetInterfaceSettings(ctx context.Context, in *EthernetInterfaceSettings, opts ...grpc.CallOption) (*Empty, error)
	GetAllDeployedEthernetInterfaceSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeployedEthernetInterfaceSettings, error)
	GetDeployedEthernetInterfaceSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*EthernetInterfaceSettings, error)
	StoreEthernetInterfaceSettings(ctx context.Context, in *EthernetRequestSettingsStorage, opts ...grpc.CallOption) (*Empty, error)
	GetStoredEthernetInterfaceSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*EthernetInterfaceSettings, error)
	DeployStoredEthernetInterfaceSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	DeleteStoredEthernetInterfaceSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	ListStoredEthernetInterfaceSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error)
	// TriggerActions
	GetDeployedTriggerActionSet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TriggerActionSet, error)
	DeployTriggerActionSetReplace(ctx context.Context, in *TriggerActionSet, opts ...grpc.CallOption) (*TriggerActionSet, error)
	DeployTriggerActionSetAdd(ctx context.Context, in *TriggerActionSet, opts ...grpc.CallOption) (*TriggerActionSet, error)
	DeployTriggerActionSetRemove(ctx context.Context, in *TriggerActionSet, opts ...grpc.CallOption) (*TriggerActionSet, error)
	DeployTriggerActionSetUpdate(ctx context.Context, in *TriggerActionSet, opts ...grpc.CallOption) (*TriggerActionSet, error)
	ListStoredTriggerActionSets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error)
	StoreTriggerActionSet(ctx context.Context, in *TriggerActionSet, opts ...grpc.CallOption) (*Empty, error)
	DeployStoredTriggerActionSetReplace(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*TriggerActionSet, error)
	DeployStoredTriggerActionSetAdd(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*TriggerActionSet, error)
	DeleteStoredTriggerActionSet(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	// TriggerAction for cli (trigger group send and wait for group receive)
	WaitTriggerGroupReceive(ctx context.Context, in *TriggerGroupReceive, opts ...grpc.CallOption) (*Empty, error)
	FireActionGroupSend(ctx context.Context, in *ActionGroupSend, opts ...grpc.CallOption) (*Empty, error)
	// MasterTemplates
	DeployMasterTemplate(ctx context.Context, in *MasterTemplate, opts ...grpc.CallOption) (*Empty, error)
	StoreMasterTemplate(ctx context.Context, in *RequestMasterTemplateStorage, opts ...grpc.CallOption) (*Empty, error)
	GetStoredMasterTemplate(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*MasterTemplate, error)
	DeployStoredMasterTemplate(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*MasterTemplate, error)
	DeleteStoredMasterTemplate(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	ListStoredMasterTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error)
	// Startup Master Template
	GetStartupMasterTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessage, error)
	SetStartupMasterTemplate(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	// DB backup&restore
	DBBackup(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	DBRestore(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error)
	ListStoredHIDScripts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error)
	ListStoredBashScripts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error)
	ListStoredDBBackups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error)
	// GPIO
	GetAvailableGpios(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error)
	// System
	Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Reboot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type BlackJackClient struct {
	cc *grpc.ClientConn
}

func NewBlackJackClient(cc *grpc.ClientConn) BlackJackClient {
	return &BlackJackClient{cc}
}

func (c *BlackJackClient) GetBluetoothControllerInformation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BluetoothControllerInformation, error) {
	out := new(BluetoothControllerInformation)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetBluetoothControllerInformation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployBluetoothControllerInformation(ctx context.Context, in *BluetoothControllerInformation, opts ...grpc.CallOption) (*BluetoothControllerInformation, error) {
	out := new(BluetoothControllerInformation)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployBluetoothControllerInformation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetBluetoothAgentSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BluetoothAgentSettings, error) {
	out := new(BluetoothAgentSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetBluetoothAgentSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployBluetoothAgentSettings(ctx context.Context, in *BluetoothAgentSettings, opts ...grpc.CallOption) (*BluetoothAgentSettings, error) {
	out := new(BluetoothAgentSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployBluetoothAgentSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) SetBluetoothNetworkService(ctx context.Context, in *BluetoothNetworkService, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/SetBluetoothNetworkService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployBluetoothSettings(ctx context.Context, in *BluetoothSettings, opts ...grpc.CallOption) (*BluetoothSettings, error) {
	out := new(BluetoothSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployBluetoothSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) StoreBluetoothSettings(ctx context.Context, in *BluetoothRequestSettingsStorage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/StoreBluetoothSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetStoredBluetoothSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*BluetoothSettings, error) {
	out := new(BluetoothSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetStoredBluetoothSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployStoredBluetoothSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*BluetoothSettings, error) {
	out := new(BluetoothSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployStoredBluetoothSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeleteStoredBluetoothSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeleteStoredBluetoothSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) StoreDeployedBluetoothSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/StoreDeployedBluetoothSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) ListStoredBluetoothSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error) {
	out := new(StringMessageArray)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/ListStoredBluetoothSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetDeployedGadgetSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error) {
	out := new(GadgetSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetDeployedGadgetSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployGadgetSetting(ctx context.Context, in *GadgetSettings, opts ...grpc.CallOption) (*GadgetSettings, error) {
	out := new(GadgetSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployGadgetSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetLEDSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LEDSettings, error) {
	out := new(LEDSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetLEDSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) SetLEDSettings(ctx context.Context, in *LEDSettings, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/SetLEDSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) MountUMSFile(ctx context.Context, in *GadgetSettingsUMS, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/MountUMSFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) StoreUSBSettings(ctx context.Context, in *USBRequestSettingsStorage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/StoreUSBSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetStoredUSBSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*GadgetSettings, error) {
	out := new(GadgetSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetStoredUSBSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployStoredUSBSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*GadgetSettings, error) {
	out := new(GadgetSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployStoredUSBSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeleteStoredUSBSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeleteStoredUSBSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) StoreDeployedUSBSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/StoreDeployedUSBSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) ListStoredUSBSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error) {
	out := new(StringMessageArray)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/ListStoredUSBSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) ListUmsImageCdrom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error) {
	out := new(StringMessageArray)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/ListUmsImageCdrom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) ListUmsImageFlashdrive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error) {
	out := new(StringMessageArray)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/ListUmsImageFlashdrive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) HIDRunScript(ctx context.Context, in *HIDScriptRequest, opts ...grpc.CallOption) (*HIDScriptResult, error) {
	out := new(HIDScriptResult)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/HIDRunScript", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) HIDRunScriptJob(ctx context.Context, in *HIDScriptRequest, opts ...grpc.CallOption) (*HIDScriptJob, error) {
	out := new(HIDScriptJob)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/HIDRunScriptJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) HIDGetScriptJobResult(ctx context.Context, in *HIDScriptJob, opts ...grpc.CallOption) (*HIDScriptResult, error) {
	out := new(HIDScriptResult)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/HIDGetScriptJobResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) HIDCancelScriptJob(ctx context.Context, in *HIDScriptJob, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/HIDCancelScriptJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) HIDGetRunningScriptJobs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HIDScriptJobList, error) {
	out := new(HIDScriptJobList)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/HIDGetRunningScriptJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) HIDCancelAllScriptJobs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/HIDCancelAllScriptJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) HIDGetRunningJobState(ctx context.Context, in *HIDScriptJob, opts ...grpc.CallOption) (*HIDRunningJobStateResult, error) {
	out := new(HIDRunningJobStateResult)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/HIDGetRunningJobState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) FSWriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/FSWriteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) FSReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error) {
	out := new(ReadFileResponse)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/FSReadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) FSGetFileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileInfoResponse, error) {
	out := new(FileInfoResponse)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/FSGetFileInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) FSCreateTempDirOrFile(ctx context.Context, in *TempDirOrFileRequest, opts ...grpc.CallOption) (*TempDirOrFileResponse, error) {
	out := new(TempDirOrFileResponse)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/FSCreateTempDirOrFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) EventListen(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (BlackJack_EventListenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlackJack_serviceDesc.Streams[0], c.cc, "/BlackJack_grpc.BlackJack/EventListen", opts...)
	if err != nil {
		return nil, err
	}
	x := &BlackJackEventListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlackJack_EventListenClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type BlackJackEventListenClient struct {
	grpc.ClientStream
}

func (x *BlackJackEventListenClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *BlackJackClient) EchoRequest(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/EchoRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployWiFiSettings(ctx context.Context, in *WiFiSettings, opts ...grpc.CallOption) (*WiFiState, error) {
	out := new(WiFiState)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployWiFiSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetWiFiState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WiFiState, error) {
	out := new(WiFiState)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetWiFiState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) ListenWiFiStateChanges(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WiFiState, error) {
	out := new(WiFiState)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/ListenWiFiStateChanges", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) StoreWifiSettings(ctx context.Context, in *WifiRequestSettingsStorage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/StoreWifiSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetStoredWifiSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*WiFiSettings, error) {
	out := new(WiFiSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetStoredWifiSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployStoredWifiSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*WiFiState, error) {
	out := new(WiFiState)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployStoredWifiSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeleteStoredWifiSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeleteStoredWifiSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) StoreDeployedWifiSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/StoreDeployedWifiSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) ListStoredWifiSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error) {
	out := new(StringMessageArray)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/ListStoredWifiSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployEthernetInterfaceSettings(ctx context.Context, in *EthernetInterfaceSettings, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployEthernetInterfaceSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetAllDeployedEthernetInterfaceSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeployedEthernetInterfaceSettings, error) {
	out := new(DeployedEthernetInterfaceSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetAllDeployedEthernetInterfaceSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetDeployedEthernetInterfaceSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*EthernetInterfaceSettings, error) {
	out := new(EthernetInterfaceSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetDeployedEthernetInterfaceSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) StoreEthernetInterfaceSettings(ctx context.Context, in *EthernetRequestSettingsStorage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/StoreEthernetInterfaceSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetStoredEthernetInterfaceSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*EthernetInterfaceSettings, error) {
	out := new(EthernetInterfaceSettings)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetStoredEthernetInterfaceSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployStoredEthernetInterfaceSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployStoredEthernetInterfaceSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeleteStoredEthernetInterfaceSettings(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeleteStoredEthernetInterfaceSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) ListStoredEthernetInterfaceSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error) {
	out := new(StringMessageArray)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/ListStoredEthernetInterfaceSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetDeployedTriggerActionSet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TriggerActionSet, error) {
	out := new(TriggerActionSet)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetDeployedTriggerActionSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployTriggerActionSetReplace(ctx context.Context, in *TriggerActionSet, opts ...grpc.CallOption) (*TriggerActionSet, error) {
	out := new(TriggerActionSet)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployTriggerActionSetReplace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployTriggerActionSetAdd(ctx context.Context, in *TriggerActionSet, opts ...grpc.CallOption) (*TriggerActionSet, error) {
	out := new(TriggerActionSet)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployTriggerActionSetAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployTriggerActionSetRemove(ctx context.Context, in *TriggerActionSet, opts ...grpc.CallOption) (*TriggerActionSet, error) {
	out := new(TriggerActionSet)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployTriggerActionSetRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployTriggerActionSetUpdate(ctx context.Context, in *TriggerActionSet, opts ...grpc.CallOption) (*TriggerActionSet, error) {
	out := new(TriggerActionSet)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployTriggerActionSetUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) ListStoredTriggerActionSets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error) {
	out := new(StringMessageArray)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/ListStoredTriggerActionSets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) StoreTriggerActionSet(ctx context.Context, in *TriggerActionSet, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/StoreTriggerActionSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployStoredTriggerActionSetReplace(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*TriggerActionSet, error) {
	out := new(TriggerActionSet)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployStoredTriggerActionSetReplace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployStoredTriggerActionSetAdd(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*TriggerActionSet, error) {
	out := new(TriggerActionSet)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployStoredTriggerActionSetAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeleteStoredTriggerActionSet(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeleteStoredTriggerActionSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) WaitTriggerGroupReceive(ctx context.Context, in *TriggerGroupReceive, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/WaitTriggerGroupReceive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) FireActionGroupSend(ctx context.Context, in *ActionGroupSend, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/FireActionGroupSend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployMasterTemplate(ctx context.Context, in *MasterTemplate, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployMasterTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) StoreMasterTemplate(ctx context.Context, in *RequestMasterTemplateStorage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/StoreMasterTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetStoredMasterTemplate(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*MasterTemplate, error) {
	out := new(MasterTemplate)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetStoredMasterTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeployStoredMasterTemplate(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*MasterTemplate, error) {
	out := new(MasterTemplate)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeployStoredMasterTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DeleteStoredMasterTemplate(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DeleteStoredMasterTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) ListStoredMasterTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error) {
	out := new(StringMessageArray)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/ListStoredMasterTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetStartupMasterTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetStartupMasterTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) SetStartupMasterTemplate(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/SetStartupMasterTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DBBackup(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DBBackup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) DBRestore(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/DBRestore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) ListStoredHIDScripts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error) {
	out := new(StringMessageArray)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/ListStoredHIDScripts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) ListStoredBashScripts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error) {
	out := new(StringMessageArray)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/ListStoredBashScripts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) ListStoredDBBackups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error) {
	out := new(StringMessageArray)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/ListStoredDBBackups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) GetAvailableGpios(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringMessageArray, error) {
	out := new(StringMessageArray)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/GetAvailableGpios", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/Shutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlackJackClient) Reboot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BlackJack_grpc.BlackJack/Reboot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlackJack service

type BlackJackServer interface {
	// Bluetooth
	GetBluetoothControllerInformation(context.Context, *Empty) (*BluetoothControllerInformation, error)
	DeployBluetoothControllerInformation(context.Context, *BluetoothControllerInformation) (*BluetoothControllerInformation, error)
	GetBluetoothAgentSettings(context.Context, *Empty) (*BluetoothAgentSettings, error)
	DeployBluetoothAgentSettings(context.Context, *BluetoothAgentSettings) (*BluetoothAgentSettings, error)
	SetBluetoothNetworkService(context.Context, *BluetoothNetworkService) (*Empty, error)
	DeployBluetoothSettings(context.Context, *BluetoothSettings) (*BluetoothSettings, error)
	StoreBluetoothSettings(context.Context, *BluetoothRequestSettingsStorage) (*Empty, error)
	GetStoredBluetoothSettings(context.Context, *StringMessage) (*BluetoothSettings, error)
	DeployStoredBluetoothSettings(context.Context, *StringMessage) (*BluetoothSettings, error)
	DeleteStoredBluetoothSettings(context.Context, *StringMessage) (*Empty, error)
	StoreDeployedBluetoothSettings(context.Context, *StringMessage) (*Empty, error)
	ListStoredBluetoothSettings(context.Context, *Empty) (*StringMessageArray, error)
	// USB gadget
	GetDeployedGadgetSetting(context.Context, *Empty) (*GadgetSettings, error)
	DeployGadgetSetting(context.Context, *GadgetSettings) (*GadgetSettings, error)
	GetLEDSettings(context.Context, *Empty) (*LEDSettings, error)
	SetLEDSettings(context.Context, *LEDSettings) (*Empty, error)
	MountUMSFile(context.Context, *GadgetSettingsUMS) (*Empty, error)
	StoreUSBSettings(context.Context, *USBRequestSettingsStorage) (*Empty, error)
	GetStoredUSBSettings(context.Context, *StringMessage) (*GadgetSettings, error)
	DeployStoredUSBSettings(context.Context, *StringMessage) (*GadgetSettings, error)
	DeleteStoredUSBSettings(context.Context, *StringMessage) (*Empty, error)
	StoreDeployedUSBSettings(context.Context, *StringMessage) (*Empty, error)
	ListStoredUSBSettings(context.Context, *Empty) (*StringMessageArray, error)
	ListUmsImageCdrom(context.Context, *Empty) (*StringMessageArray, error)
	ListUmsImageFlashdrive(context.Context, *Empty) (*StringMessageArray, error)
	// HIDScript / job management
	HIDRunScript(context.Context, *HIDScriptRequest) (*HIDScriptResult, error)
	HIDRunScriptJob(context.Context, *HIDScriptRequest) (*HIDScriptJob, error)
	HIDGetScriptJobResult(context.Context, *HIDScriptJob) (*HIDScriptResult, error)
	HIDCancelScriptJob(context.Context, *HIDScriptJob) (*Empty, error)
	HIDGetRunningScriptJobs(context.Context, *Empty) (*HIDScriptJobList, error)
	HIDCancelAllScriptJobs(context.Context, *Empty) (*Empty, error)
	HIDGetRunningJobState(context.Context, *HIDScriptJob) (*HIDRunningJobStateResult, error)
	// FileSystem
	FSWriteFile(context.Context, *WriteFileRequest) (*Empty, error)
	FSReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error)
	FSGetFileInfo(context.Context, *FileInfoRequest) (*FileInfoResponse, error)
	FSCreateTempDirOrFile(context.Context, *TempDirOrFileRequest) (*TempDirOrFileResponse, error)
	// Events
	EventListen(*EventRequest, BlackJack_EventListenServer) error
	// Alive check
	EchoRequest(context.Context, *StringMessage) (*StringMessage, error)
	// WiFi
	DeployWiFiSettings(context.Context, *WiFiSettings) (*WiFiState, error)
	GetWiFiState(context.Context, *Empty) (*WiFiState, error)
	ListenWiFiStateChanges(context.Context, *Empty) (*WiFiState, error)
	StoreWifiSettings(context.Context, *WifiRequestSettingsStorage) (*Empty, error)
	GetStoredWifiSettings(context.Context, *StringMessage) (*WiFiSettings, error)
	DeployStoredWifiSettings(context.Context, *StringMessage) (*WiFiState, error)
	DeleteStoredWifiSettings(context.Context, *StringMessage) (*Empty, error)
	StoreDeployedWifiSettings(context.Context, *StringMessage) (*Empty, error)
	ListStoredWifiSettings(context.Context, *Empty) (*StringMessageArray, error)
	// Ethernet
	DeployEthernetInterfaceSettings(context.Context, *EthernetInterfaceSettings) (*Empty, error)
	GetAllDeployedEthernetInterfaceSettings(context.Context, *Empty) (*DeployedEthernetInterfaceSettings, error)
	GetDeployedEthernetInterfaceSettings(context.Context, *StringMessage) (*EthernetInterfaceSettings, error)
	StoreEthernetInterfaceSettings(context.Context, *EthernetRequestSettingsStorage) (*Empty, error)
	GetStoredEthernetInterfaceSettings(context.Context, *StringMessage) (*EthernetInterfaceSettings, error)
	DeployStoredEthernetInterfaceSettings(context.Context, *StringMessage) (*Empty, error)
	DeleteStoredEthernetInterfaceSettings(context.Context, *StringMessage) (*Empty, error)
	ListStoredEthernetInterfaceSettings(context.Context, *Empty) (*StringMessageArray, error)
	// TriggerActions
	GetDeployedTriggerActionSet(context.Context, *Empty) (*TriggerActionSet, error)
	DeployTriggerActionSetReplace(context.Context, *TriggerActionSet) (*TriggerActionSet, error)
	DeployTriggerActionSetAdd(context.Context, *TriggerActionSet) (*TriggerActionSet, error)
	DeployTriggerActionSetRemove(context.Context, *TriggerActionSet) (*TriggerActionSet, error)
	DeployTriggerActionSetUpdate(context.Context, *TriggerActionSet) (*TriggerActionSet, error)
	ListStoredTriggerActionSets(context.Context, *Empty) (*StringMessageArray, error)
	StoreTriggerActionSet(context.Context, *TriggerActionSet) (*Empty, error)
	DeployStoredTriggerActionSetReplace(context.Context, *StringMessage) (*TriggerActionSet, error)
	DeployStoredTriggerActionSetAdd(context.Context, *StringMessage) (*TriggerActionSet, error)
	DeleteStoredTriggerActionSet(context.Context, *StringMessage) (*Empty, error)
	// TriggerAction for cli (trigger group send and wait for group receive)
	WaitTriggerGroupReceive(context.Context, *TriggerGroupReceive) (*Empty, error)
	FireActionGroupSend(context.Context, *ActionGroupSend) (*Empty, error)
	// MasterTemplates
	DeployMasterTemplate(context.Context, *MasterTemplate) (*Empty, error)
	StoreMasterTemplate(context.Context, *RequestMasterTemplateStorage) (*Empty, error)
	GetStoredMasterTemplate(context.Context, *StringMessage) (*MasterTemplate, error)
	DeployStoredMasterTemplate(context.Context, *StringMessage) (*MasterTemplate, error)
	DeleteStoredMasterTemplate(context.Context, *StringMessage) (*Empty, error)
	ListStoredMasterTemplate(context.Context, *Empty) (*StringMessageArray, error)
	// Startup Master Template
	GetStartupMasterTemplate(context.Context, *Empty) (*StringMessage, error)
	SetStartupMasterTemplate(context.Context, *StringMessage) (*Empty, error)
	// DB backup&restore
	DBBackup(context.Context, *StringMessage) (*Empty, error)
	DBRestore(context.Context, *StringMessage) (*Empty, error)
	ListStoredHIDScripts(context.Context, *Empty) (*StringMessageArray, error)
	ListStoredBashScripts(context.Context, *Empty) (*StringMessageArray, error)
	ListStoredDBBackups(context.Context, *Empty) (*StringMessageArray, error)
	// GPIO
	GetAvailableGpios(context.Context, *Empty) (*StringMessageArray, error)
	// System
	Shutdown(context.Context, *Empty) (*Empty, error)
	Reboot(context.Context, *Empty) (*Empty, error)
}

func RegisterBlackJackServer(s *grpc.Server, srv BlackJackServer) {
	s.RegisterService(&_BlackJack_serviceDesc, srv)
}

func _BlackJack_GetBluetoothControllerInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetBluetoothControllerInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetBluetoothControllerInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetBluetoothControllerInformation(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployBluetoothControllerInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BluetoothControllerInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployBluetoothControllerInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployBluetoothControllerInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployBluetoothControllerInformation(ctx, req.(*BluetoothControllerInformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetBluetoothAgentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetBluetoothAgentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetBluetoothAgentSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetBluetoothAgentSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployBluetoothAgentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BluetoothAgentSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployBluetoothAgentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployBluetoothAgentSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployBluetoothAgentSettings(ctx, req.(*BluetoothAgentSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_SetBluetoothNetworkService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BluetoothNetworkService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).SetBluetoothNetworkService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/SetBluetoothNetworkService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).SetBluetoothNetworkService(ctx, req.(*BluetoothNetworkService))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployBluetoothSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BluetoothSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployBluetoothSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployBluetoothSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployBluetoothSettings(ctx, req.(*BluetoothSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_StoreBluetoothSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BluetoothRequestSettingsStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).StoreBluetoothSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/StoreBluetoothSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).StoreBluetoothSettings(ctx, req.(*BluetoothRequestSettingsStorage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetStoredBluetoothSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetStoredBluetoothSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetStoredBluetoothSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetStoredBluetoothSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployStoredBluetoothSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployStoredBluetoothSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployStoredBluetoothSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployStoredBluetoothSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeleteStoredBluetoothSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeleteStoredBluetoothSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeleteStoredBluetoothSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeleteStoredBluetoothSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_StoreDeployedBluetoothSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).StoreDeployedBluetoothSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/StoreDeployedBluetoothSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).StoreDeployedBluetoothSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_ListStoredBluetoothSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).ListStoredBluetoothSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/ListStoredBluetoothSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).ListStoredBluetoothSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetDeployedGadgetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetDeployedGadgetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetDeployedGadgetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetDeployedGadgetSetting(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployGadgetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GadgetSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployGadgetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployGadgetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployGadgetSetting(ctx, req.(*GadgetSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetLEDSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetLEDSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetLEDSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetLEDSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_SetLEDSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LEDSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).SetLEDSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/SetLEDSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).SetLEDSettings(ctx, req.(*LEDSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_MountUMSFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GadgetSettingsUMS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).MountUMSFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/MountUMSFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).MountUMSFile(ctx, req.(*GadgetSettingsUMS))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_StoreUSBSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(USBRequestSettingsStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).StoreUSBSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/StoreUSBSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).StoreUSBSettings(ctx, req.(*USBRequestSettingsStorage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetStoredUSBSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetStoredUSBSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetStoredUSBSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetStoredUSBSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployStoredUSBSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployStoredUSBSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployStoredUSBSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployStoredUSBSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeleteStoredUSBSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeleteStoredUSBSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeleteStoredUSBSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeleteStoredUSBSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_StoreDeployedUSBSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).StoreDeployedUSBSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/StoreDeployedUSBSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).StoreDeployedUSBSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_ListStoredUSBSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).ListStoredUSBSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/ListStoredUSBSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).ListStoredUSBSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_ListUmsImageCdrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).ListUmsImageCdrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/ListUmsImageCdrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).ListUmsImageCdrom(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_ListUmsImageFlashdrive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).ListUmsImageFlashdrive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/ListUmsImageFlashdrive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).ListUmsImageFlashdrive(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_HIDRunScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HIDScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).HIDRunScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/HIDRunScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).HIDRunScript(ctx, req.(*HIDScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_HIDRunScriptJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HIDScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).HIDRunScriptJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/HIDRunScriptJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).HIDRunScriptJob(ctx, req.(*HIDScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_HIDGetScriptJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HIDScriptJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).HIDGetScriptJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/HIDGetScriptJobResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).HIDGetScriptJobResult(ctx, req.(*HIDScriptJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_HIDCancelScriptJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HIDScriptJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).HIDCancelScriptJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/HIDCancelScriptJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).HIDCancelScriptJob(ctx, req.(*HIDScriptJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_HIDGetRunningScriptJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).HIDGetRunningScriptJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/HIDGetRunningScriptJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).HIDGetRunningScriptJobs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_HIDCancelAllScriptJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).HIDCancelAllScriptJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/HIDCancelAllScriptJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).HIDCancelAllScriptJobs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_HIDGetRunningJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HIDScriptJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).HIDGetRunningJobState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/HIDGetRunningJobState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).HIDGetRunningJobState(ctx, req.(*HIDScriptJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_FSWriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).FSWriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/FSWriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).FSWriteFile(ctx, req.(*WriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_FSReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).FSReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/FSReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).FSReadFile(ctx, req.(*ReadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_FSGetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).FSGetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/FSGetFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).FSGetFileInfo(ctx, req.(*FileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_FSCreateTempDirOrFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempDirOrFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).FSCreateTempDirOrFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/FSCreateTempDirOrFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).FSCreateTempDirOrFile(ctx, req.(*TempDirOrFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_EventListen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlackJackServer).EventListen(m, &BlackJackEventListenServer{stream})
}

type BlackJack_EventListenServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type BlackJackEventListenServer struct {
	grpc.ServerStream
}

func (x *BlackJackEventListenServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _BlackJack_EchoRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).EchoRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/EchoRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).EchoRequest(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployWiFiSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WiFiSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployWiFiSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployWiFiSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployWiFiSettings(ctx, req.(*WiFiSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetWiFiState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetWiFiState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetWiFiState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetWiFiState(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_ListenWiFiStateChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).ListenWiFiStateChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/ListenWiFiStateChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).ListenWiFiStateChanges(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_StoreWifiSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WifiRequestSettingsStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).StoreWifiSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/StoreWifiSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).StoreWifiSettings(ctx, req.(*WifiRequestSettingsStorage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetStoredWifiSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetStoredWifiSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetStoredWifiSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetStoredWifiSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployStoredWifiSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployStoredWifiSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployStoredWifiSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployStoredWifiSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeleteStoredWifiSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeleteStoredWifiSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeleteStoredWifiSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeleteStoredWifiSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_StoreDeployedWifiSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).StoreDeployedWifiSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/StoreDeployedWifiSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).StoreDeployedWifiSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_ListStoredWifiSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).ListStoredWifiSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/ListStoredWifiSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).ListStoredWifiSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployEthernetInterfaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthernetInterfaceSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployEthernetInterfaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployEthernetInterfaceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployEthernetInterfaceSettings(ctx, req.(*EthernetInterfaceSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetAllDeployedEthernetInterfaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetAllDeployedEthernetInterfaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetAllDeployedEthernetInterfaceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetAllDeployedEthernetInterfaceSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetDeployedEthernetInterfaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetDeployedEthernetInterfaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetDeployedEthernetInterfaceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetDeployedEthernetInterfaceSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_StoreEthernetInterfaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthernetRequestSettingsStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).StoreEthernetInterfaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/StoreEthernetInterfaceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).StoreEthernetInterfaceSettings(ctx, req.(*EthernetRequestSettingsStorage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetStoredEthernetInterfaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetStoredEthernetInterfaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetStoredEthernetInterfaceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetStoredEthernetInterfaceSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployStoredEthernetInterfaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployStoredEthernetInterfaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployStoredEthernetInterfaceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployStoredEthernetInterfaceSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeleteStoredEthernetInterfaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeleteStoredEthernetInterfaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeleteStoredEthernetInterfaceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeleteStoredEthernetInterfaceSettings(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_ListStoredEthernetInterfaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).ListStoredEthernetInterfaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/ListStoredEthernetInterfaceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).ListStoredEthernetInterfaceSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetDeployedTriggerActionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetDeployedTriggerActionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetDeployedTriggerActionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetDeployedTriggerActionSet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployTriggerActionSetReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerActionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployTriggerActionSetReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployTriggerActionSetReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployTriggerActionSetReplace(ctx, req.(*TriggerActionSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployTriggerActionSetAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerActionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployTriggerActionSetAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployTriggerActionSetAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployTriggerActionSetAdd(ctx, req.(*TriggerActionSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployTriggerActionSetRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerActionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployTriggerActionSetRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployTriggerActionSetRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployTriggerActionSetRemove(ctx, req.(*TriggerActionSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployTriggerActionSetUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerActionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployTriggerActionSetUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployTriggerActionSetUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployTriggerActionSetUpdate(ctx, req.(*TriggerActionSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_ListStoredTriggerActionSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).ListStoredTriggerActionSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/ListStoredTriggerActionSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).ListStoredTriggerActionSets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_StoreTriggerActionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerActionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).StoreTriggerActionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/StoreTriggerActionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).StoreTriggerActionSet(ctx, req.(*TriggerActionSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployStoredTriggerActionSetReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployStoredTriggerActionSetReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployStoredTriggerActionSetReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployStoredTriggerActionSetReplace(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployStoredTriggerActionSetAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployStoredTriggerActionSetAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployStoredTriggerActionSetAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployStoredTriggerActionSetAdd(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeleteStoredTriggerActionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeleteStoredTriggerActionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeleteStoredTriggerActionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeleteStoredTriggerActionSet(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_WaitTriggerGroupReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerGroupReceive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).WaitTriggerGroupReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/WaitTriggerGroupReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).WaitTriggerGroupReceive(ctx, req.(*TriggerGroupReceive))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_FireActionGroupSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionGroupSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).FireActionGroupSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/FireActionGroupSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).FireActionGroupSend(ctx, req.(*ActionGroupSend))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployMasterTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployMasterTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployMasterTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployMasterTemplate(ctx, req.(*MasterTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_StoreMasterTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMasterTemplateStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).StoreMasterTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/StoreMasterTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).StoreMasterTemplate(ctx, req.(*RequestMasterTemplateStorage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetStoredMasterTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetStoredMasterTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetStoredMasterTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetStoredMasterTemplate(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeployStoredMasterTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeployStoredMasterTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeployStoredMasterTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeployStoredMasterTemplate(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DeleteStoredMasterTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DeleteStoredMasterTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DeleteStoredMasterTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DeleteStoredMasterTemplate(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_ListStoredMasterTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).ListStoredMasterTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/ListStoredMasterTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).ListStoredMasterTemplate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetStartupMasterTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetStartupMasterTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetStartupMasterTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetStartupMasterTemplate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_SetStartupMasterTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).SetStartupMasterTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/SetStartupMasterTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).SetStartupMasterTemplate(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DBBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DBBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DBBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DBBackup(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_DBRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).DBRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/DBRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).DBRestore(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_ListStoredHIDScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).ListStoredHIDScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/ListStoredHIDScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).ListStoredHIDScripts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_ListStoredBashScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).ListStoredBashScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/ListStoredBashScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).ListStoredBashScripts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_ListStoredDBBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).ListStoredDBBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/ListStoredDBBackups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).ListStoredDBBackups(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_GetAvailableGpios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).GetAvailableGpios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/GetAvailableGpios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).GetAvailableGpios(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).Shutdown(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlackJack_grpc.BlackJack/Reboot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).Reboot(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlackJack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BlackJack_grpc.BlackJack",
	HandlerType: (*BlackJackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBluetoothControllerInformation",
			Handler:    _BlackJack_GetBluetoothControllerInformation_Handler,
		},
		{
			MethodName: "DeployBluetoothControllerInformation",
			Handler:    _BlackJack_DeployBluetoothControllerInformation_Handler,
		},
		{
			MethodName: "GetBluetoothAgentSettings",
			Handler:    _BlackJack_GetBluetoothAgentSettings_Handler,
		},
		{
			MethodName: "DeployBluetoothAgentSettings",
			Handler:    _BlackJack_DeployBluetoothAgentSettings_Handler,
		},
		{
			MethodName: "SetBluetoothNetworkService",
			Handler:    _BlackJack_SetBluetoothNetworkService_Handler,
		},
		{
			MethodName: "DeployBluetoothSettings",
			Handler:    _BlackJack_DeployBluetoothSettings_Handler,
		},
		{
			MethodName: "StoreBluetoothSettings",
			Handler:    _BlackJack_StoreBluetoothSettings_Handler,
		},
		{
			MethodName: "GetStoredBluetoothSettings",
			Handler:    _BlackJack_GetStoredBluetoothSettings_Handler,
		},
		{
			MethodName: "DeployStoredBluetoothSettings",
			Handler:    _BlackJack_DeployStoredBluetoothSettings_Handler,
		},
		{
			MethodName: "DeleteStoredBluetoothSettings",
			Handler:    _BlackJack_DeleteStoredBluetoothSettings_Handler,
		},
		{
			MethodName: "StoreDeployedBluetoothSettings",
			Handler:    _BlackJack_StoreDeployedBluetoothSettings_Handler,
		},
		{
			MethodName: "ListStoredBluetoothSettings",
			Handler:    _BlackJack_ListStoredBluetoothSettings_Handler,
		},
		{
			MethodName: "GetDeployedGadgetSetting",
			Handler:    _BlackJack_GetDeployedGadgetSetting_Handler,
		},
		{
			MethodName: "DeployGadgetSetting",
			Handler:    _BlackJack_DeployGadgetSetting_Handler,
		},
		{
			MethodName: "GetLEDSettings",
			Handler:    _BlackJack_GetLEDSettings_Handler,
		},
		{
			MethodName: "SetLEDSettings",
			Handler:    _BlackJack_SetLEDSettings_Handler,
		},
		{
			MethodName: "MountUMSFile",
			Handler:    _BlackJack_MountUMSFile_Handler,
		},
		{
			MethodName: "StoreUSBSettings",
			Handler:    _BlackJack_StoreUSBSettings_Handler,
		},
		{
			MethodName: "GetStoredUSBSettings",
			Handler:    _BlackJack_GetStoredUSBSettings_Handler,
		},
		{
			MethodName: "DeployStoredUSBSettings",
			Handler:    _BlackJack_DeployStoredUSBSettings_Handler,
		},
		{
			MethodName: "DeleteStoredUSBSettings",
			Handler:    _BlackJack_DeleteStoredUSBSettings_Handler,
		},
		{
			MethodName: "StoreDeployedUSBSettings",
			Handler:    _BlackJack_StoreDeployedUSBSettings_Handler,
		},
		{
			MethodName: "ListStoredUSBSettings",
			Handler:    _BlackJack_ListStoredUSBSettings_Handler,
		},
		{
			MethodName: "ListUmsImageCdrom",
			Handler:    _BlackJack_ListUmsImageCdrom_Handler,
		},
		{
			MethodName: "ListUmsImageFlashdrive",
			Handler:    _BlackJack_ListUmsImageFlashdrive_Handler,
		},
		{
			MethodName: "HIDRunScript",
			Handler:    _BlackJack_HIDRunScript_Handler,
		},
		{
			MethodName: "HIDRunScriptJob",
			Handler:    _BlackJack_HIDRunScriptJob_Handler,
		},
		{
			MethodName: "HIDGetScriptJobResult",
			Handler:    _BlackJack_HIDGetScriptJobResult_Handler,
		},
		{
			MethodName: "HIDCancelScriptJob",
			Handler:    _BlackJack_HIDCancelScriptJob_Handler,
		},
		{
			MethodName: "HIDGetRunningScriptJobs",
			Handler:    _BlackJack_HIDGetRunningScriptJobs_Handler,
		},
		{
			MethodName: "HIDCancelAllScriptJobs",
			Handler:    _BlackJack_HIDCancelAllScriptJobs_Handler,
		},
		{
			MethodName: "HIDGetRunningJobState",
			Handler:    _BlackJack_HIDGetRunningJobState_Handler,
		},
		{
			MethodName: "FSWriteFile",
			Handler:    _BlackJack_FSWriteFile_Handler,
		},
		{
			MethodName: "FSReadFile",
			Handler:    _BlackJack_FSReadFile_Handler,
		},
		{
			MethodName: "FSGetFileInfo",
			Handler:    _BlackJack_FSGetFileInfo_Handler,
		},
		{
			MethodName: "FSCreateTempDirOrFile",
			Handler:    _BlackJack_FSCreateTempDirOrFile_Handler,
		},
		{
			MethodName: "EchoRequest",
			Handler:    _BlackJack_EchoRequest_Handler,
		},
		{
			MethodName: "DeployWiFiSettings",
			Handler:    _BlackJack_DeployWiFiSettings_Handler,
		},
		{
			MethodName: "GetWiFiState",
			Handler:    _BlackJack_GetWiFiState_Handler,
		},
		{
			MethodName: "ListenWiFiStateChanges",
			Handler:    _BlackJack_ListenWiFiStateChanges_Handler,
		},
		{
			MethodName: "StoreWifiSettings",
			Handler:    _BlackJack_StoreWifiSettings_Handler,
		},
		{
			MethodName: "GetStoredWifiSettings",
			Handler:    _BlackJack_GetStoredWifiSettings_Handler,
		},
		{
			MethodName: "DeployStoredWifiSettings",
			Handler:    _BlackJack_DeployStoredWifiSettings_Handler,
		},
		{
			MethodName: "DeleteStoredWifiSettings",
			Handler:    _BlackJack_DeleteStoredWifiSettings_Handler,
		},
		{
			MethodName: "StoreDeployedWifiSettings",
			Handler:    _BlackJack_StoreDeployedWifiSettings_Handler,
		},
		{
			MethodName: "ListStoredWifiSettings",
			Handler:    _BlackJack_ListStoredWifiSettings_Handler,
		},
		{
			MethodName: "DeployEthernetInterfaceSettings",
			Handler:    _BlackJack_DeployEthernetInterfaceSettings_Handler,
		},
		{
			MethodName: "GetAllDeployedEthernetInterfaceSettings",
			Handler:    _BlackJack_GetAllDeployedEthernetInterfaceSettings_Handler,
		},
		{
			MethodName: "GetDeployedEthernetInterfaceSettings",
			Handler:    _BlackJack_GetDeployedEthernetInterfaceSettings_Handler,
		},
		{
			MethodName: "StoreEthernetInterfaceSettings",
			Handler:    _BlackJack_StoreEthernetInterfaceSettings_Handler,
		},
		{
			MethodName: "GetStoredEthernetInterfaceSettings",
			Handler:    _BlackJack_GetStoredEthernetInterfaceSettings_Handler,
		},
		{
			MethodName: "DeployStoredEthernetInterfaceSettings",
			Handler:    _BlackJack_DeployStoredEthernetInterfaceSettings_Handler,
		},
		{
			MethodName: "DeleteStoredEthernetInterfaceSettings",
			Handler:    _BlackJack_DeleteStoredEthernetInterfaceSettings_Handler,
		},
		{
			MethodName: "ListStoredEthernetInterfaceSettings",
			Handler:    _BlackJack_ListStoredEthernetInterfaceSettings_Handler,
		},
		{
			MethodName: "GetDeployedTriggerActionSet",
			Handler:    _BlackJack_GetDeployedTriggerActionSet_Handler,
		},
		{
			MethodName: "DeployTriggerActionSetReplace",
			Handler:    _BlackJack_DeployTriggerActionSetReplace_Handler,
		},
		{
			MethodName: "DeployTriggerActionSetAdd",
			Handler:    _BlackJack_DeployTriggerActionSetAdd_Handler,
		},
		{
			MethodName: "DeployTriggerActionSetRemove",
			Handler:    _BlackJack_DeployTriggerActionSetRemove_Handler,
		},
		{
			MethodName: "DeployTriggerActionSetUpdate",
			Handler:    _BlackJack_DeployTriggerActionSetUpdate_Handler,
		},
		{
			MethodName: "ListStoredTriggerActionSets",
			Handler:    _BlackJack_ListStoredTriggerActionSets_Handler,
		},
		{
			MethodName: "StoreTriggerActionSet",
			Handler:    _BlackJack_StoreTriggerActionSet_Handler,
		},
		{
			MethodName: "DeployStoredTriggerActionSetReplace",
			Handler:    _BlackJack_DeployStoredTriggerActionSetReplace_Handler,
		},
		{
			MethodName: "DeployStoredTriggerActionSetAdd",
			Handler:    _BlackJack_DeployStoredTriggerActionSetAdd_Handler,
		},
		{
			MethodName: "DeleteStoredTriggerActionSet",
			Handler:    _BlackJack_DeleteStoredTriggerActionSet_Handler,
		},
		{
			MethodName: "WaitTriggerGroupReceive",
			Handler:    _BlackJack_WaitTriggerGroupReceive_Handler,
		},
		{
			MethodName: "FireActionGroupSend",
			Handler:    _BlackJack_FireActionGroupSend_Handler,
		},
		{
			MethodName: "DeployMasterTemplate",
			Handler:    _BlackJack_DeployMasterTemplate_Handler,
		},
		{
			MethodName: "StoreMasterTemplate",
			Handler:    _BlackJack_StoreMasterTemplate_Handler,
		},
		{
			MethodName: "GetStoredMasterTemplate",
			Handler:    _BlackJack_GetStoredMasterTemplate_Handler,
		},
		{
			MethodName: "DeployStoredMasterTemplate",
			Handler:    _BlackJack_DeployStoredMasterTemplate_Handler,
		},
		{
			MethodName: "DeleteStoredMasterTemplate",
			Handler:    _BlackJack_DeleteStoredMasterTemplate_Handler,
		},
		{
			MethodName: "ListStoredMasterTemplate",
			Handler:    _BlackJack_ListStoredMasterTemplate_Handler,
		},
		{
			MethodName: "GetStartupMasterTemplate",
			Handler:    _BlackJack_GetStartupMasterTemplate_Handler,
		},
		{
			MethodName: "SetStartupMasterTemplate",
			Handler:    _BlackJack_SetStartupMasterTemplate_Handler,
		},
		{
			MethodName: "DBBackup",
			Handler:    _BlackJack_DBBackup_Handler,
		},
		{
			MethodName: "DBRestore",
			Handler:    _BlackJack_DBRestore_Handler,
		},
		{
			MethodName: "ListStoredHIDScripts",
			Handler:    _BlackJack_ListStoredHIDScripts_Handler,
		},
		{
			MethodName: "ListStoredBashScripts",
			Handler:    _BlackJack_ListStoredBashScripts_Handler,
		},
		{
			MethodName: "ListStoredDBBackups",
			Handler:    _BlackJack_ListStoredDBBackups_Handler,
		},
		{
			MethodName: "GetAvailableGpios",
			Handler:    _BlackJack_GetAvailableGpios_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _BlackJack_Shutdown_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _BlackJack_Reboot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventListen",
			Handler:       _BlackJack_EventListen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 4963 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5c, 0x4b, 0x73, 0x23, 0x47,
	0x72, 0x06, 0x08, 0x3e, 0x80, 0x04, 0x41, 0x36, 0x6b, 0x86, 0x24, 0x86, 0xf3, 0xee, 0x1d, 0x49,
	0xb3, 0x94, 0x44, 0xad, 0xb8, 0xb3, 0x23, 0xad, 0x56, 0xb2, 0x16, 0x2f, 0x02, 0x98, 0x01, 0x01,
	0xa8, 0x1b, 0x18, 0x6a, 0x5f, 0xee, 0x6d, 0x74, 0x17, 0xc1, 0xd6, 0x34, 0xba, 0xe1, 0x7e, 0x90,
	0xa2, 0x1d, 0xb1, 0x11, 0xde, 0x08, 0x47, 0xec, 0xc1, 0x77, 0x1f, 0x7c, 0xf5, 0xd5, 0xbe, 0xf9,
	0x67, 0xf8, 0x87, 0xf8, 0xb2, 0x37, 0x5f, 0x7c, 0xb1, 0xa3, 0xaa, 0xfa, 0x09, 0x74, 0x83, 0x8f,
	0x91, 0x6e, 0x5d, 0x59, 0x99, 0x5f, 0x55, 0x65, 0x65, 0x66, 0x65, 0x65, 0x81, 0x04, 0x18, 0x5b,
	0x53, 0xe5, 0x60, 0x6a, 0x99, 0x8e, 0x89, 0x8a, 0xfd, 0x17, 0x17, 0x46, 0xff, 0x53, 0x89, 0x90,
	0xf8, 0x7f, 0x5d, 0x82, 0x8d, 0x63, 0xd9, 0x76, 0xb0, 0x35, 0xc0, 0x93, 0xa9, 0x2e, 0x3b, 0x18,
	0xbd, 0x84, 0x5d, 0xc7, 0xfb, 0x96, 0x0c, 0x79, 0x82, 0xa5, 0x91, 0xee, 0x62, 0xc7, 0x34, 0x9d,
	0xb3, 0x72, 0xf6, 0x49, 0xf6, 0x79, 0x41, 0xd8, 0xf6, 0xbb, 0xbb, 0xf2, 0x04, 0x57, 0xfd, 0x4e,
	0xb4, 0x0f, 0x5b, 0x71, 0x39, 0xd7, 0x1e, 0x95, 0x97, 0xa8, 0xc4, 0x66, 0x54, 0x62, 0x68, 0x8f,
	0xd0, 0x47, 0x80, 0xe2, 0xbc, 0x17, 0xda, 0xa9, 0x56, 0xce, 0x51, 0x66, 0x2e, 0xca, 0x7c, 0xa2,
	0x9d, 0x6a, 0xa8, 0x02, 0x0f, 0xe3, 0xdc, 0x8e, 0xa5, 0x8d, 0xc7, 0xd8, 0x92, 0x64, 0xc5, 0xd1,
	0x4c, 0xc3, 0x2e, 0x2f, 0x53, 0xc1, 0xbd, 0xa8, 0xe0, 0x80, 0xb1, 0x54, 0x18, 0x07, 0x7a, 0x01,
	0x3b, 0x31, 0x08, 0x5b, 0x32, 0xb0, 0x73, 0x61, 0x5a, 0x6f, 0xcb, 0x2b, 0x4f, 0x72, 0xcf, 0x0b,
	0xc2, 0xdd, 0xa8, 0xac, 0xdd, 0x65, 0x7d, 0xfc, 0x3f, 0xc0, 0x03, 0x01, 0xff, 0x9d, 0x8b, 0x6d,
	0x27, 0xae, 0x23, 0xd1, 0x31, 0x2d, 0x79, 0x8c, 0x11, 0x0f, 0xeb, 0x83, 0x88, 0x9c, 0xa7, 0x9f,
	0x18, 0x0d, 0x7d, 0x06, 0x79, 0x1f, 0x9b, 0x6a, 0xa3, 0x78, 0x78, 0xff, 0x20, 0xb2, 0x03, 0x07,
	0x71, 0x64, 0x21, 0x60, 0xe6, 0xff, 0x31, 0x0b, 0x8f, 0x03, 0xed, 0x7a, 0xd3, 0x10, 0xb1, 0xe3,
	0x68, 0xc6, 0xd8, 0xbe, 0xc9, 0x04, 0xbe, 0x80, 0xbc, 0xed, 0x89, 0x79, 0x13, 0x78, 0x14, 0x9b,
	0x40, 0x30, 0x86, 0x0f, 0x2e, 0x04, 0xfc, 0xfc, 0x3f, 0x65, 0x61, 0x6b, 0xae, 0x1f, 0xfd, 0x0a,
	0x96, 0x14, 0x8d, 0x8e, 0x55, 0x3c, 0xfc, 0x30, 0x19, 0xab, 0x66, 0x1a, 0x8e, 0x65, 0xea, 0x3a,
	0xb6, 0xda, 0xc6, 0xa9, 0x69, 0x4d, 0x64, 0xb2, 0x0d, 0xc2, 0x92, 0xa2, 0xa1, 0x9f, 0xc3, 0x92,
	0xec, 0x4f, 0xe4, 0x27, 0xc9, 0xc2, 0x95, 0x31, 0x36, 0x82, 0xa5, 0x0a, 0x4b, 0xb2, 0xcd, 0xef,
	0xc3, 0x4e, 0x72, 0x2f, 0xe2, 0x20, 0x37, 0xd5, 0x0c, 0x6f, 0xe1, 0xe4, 0x93, 0xff, 0xdf, 0x2c,
	0xec, 0x06, 0xcc, 0xde, 0x4e, 0x8a, 0xd8, 0x3a, 0xd7, 0x14, 0x4c, 0xcc, 0xc0, 0xc2, 0x63, 0x8d,
	0x68, 0x5c, 0x32, 0x2d, 0xc9, 0x35, 0xfc, 0x16, 0x05, 0xc8, 0x0b, 0x77, 0xfd, 0x76, 0xcf, 0x1a,
	0x06, 0x7d, 0xc4, 0xb2, 0x6d, 0x6c, 0x9d, 0x33, 0x19, 0xc5, 0x34, 0x0c, 0xac, 0x38, 0x74, 0x05,
	0x79, 0x61, 0x93, 0x75, 0xf4, 0xac, 0x1a, 0x23, 0xa3, 0x2f, 0x61, 0xd9, 0xb9, 0x9c, 0x62, 0x6a,
	0xcb, 0x1b, 0x87, 0xcf, 0x93, 0x17, 0x18, 0x9f, 0xd5, 0xe0, 0x72, 0x8a, 0x05, 0x2a, 0x85, 0x1e,
	0x41, 0x71, 0x22, 0x2b, 0x64, 0x18, 0x62, 0xa4, 0x9e, 0x5d, 0x17, 0x26, 0xb2, 0xd2, 0xb3, 0xe8,
	0x5e, 0x3e, 0x86, 0xe2, 0xc8, 0xd2, 0xd4, 0x31, 0x33, 0xe2, 0xf2, 0x0a, 0xed, 0x07, 0x46, 0x22,
	0x0c, 0xfc, 0x7f, 0x2f, 0xc3, 0xfd, 0x84, 0x4d, 0x08, 0xd4, 0x55, 0x86, 0xb5, 0xa9, 0x79, 0x81,
	0x2d, 0xac, 0x7a, 0x2b, 0xf6, 0x9b, 0xe8, 0x09, 0x14, 0xbd, 0xa5, 0xc9, 0x23, 0x1d, 0x7b, 0xcb,
	0x8b, 0x92, 0xd0, 0x4f, 0x81, 0x3b, 0x95, 0x6d, 0x47, 0x8a, 0xb2, 0xe5, 0x98, 0x16, 0x08, 0xbd,
	0x16, 0x61, 0xe5, 0x61, 0x5d, 0xd5, 0x6c, 0xc5, 0x3c, 0xc7, 0x16, 0x65, 0x5b, 0xa6, 0x6c, 0x31,
	0x1a, 0xda, 0x83, 0xfc, 0xc8, 0x34, 0x54, 0xda, 0xbf, 0x42, 0xfb, 0x83, 0x36, 0x3a, 0x80, 0x3b,
	0xba, 0x66, 0xbc, 0x95, 0x74, 0x7c, 0x8e, 0x75, 0xc9, 0xc6, 0x8a, 0x6b, 0x69, 0xce, 0x65, 0x79,
	0x95, 0xb2, 0x6d, 0x91, 0xae, 0x0e, 0xe9, 0x11, 0xbd, 0x0e, 0x74, 0x08, 0xdb, 0x94, 0x09, 0x4b,
	0xb6, 0x36, 0x99, 0xea, 0x58, 0x9a, 0xca, 0x9a, 0xa5, 0x19, 0xe3, 0xf2, 0x1a, 0x95, 0xb8, 0xc3,
	0x3a, 0x45, 0xda, 0xd7, 0x67, 0x5d, 0x68, 0x1b, 0x56, 0x47, 0x96, 0x84, 0x55, 0xab, 0x9c, 0xa7,
	0x4c, 0x2b, 0x23, 0xab, 0xa1, 0x5a, 0xe8, 0x21, 0xc0, 0x99, 0x36, 0x3e, 0x93, 0xec, 0x29, 0xc6,
	0x6a, 0xb9, 0x40, 0xbb, 0x0a, 0x84, 0x22, 0x12, 0x02, 0xe9, 0xd6, 0xcd, 0x0b, 0x09, 0x1b, 0xd8,
	0x1a, 0x5f, 0x96, 0x81, 0x75, 0xeb, 0xe6, 0x45, 0x83, 0x12, 0x88, 0x16, 0x65, 0xf5, 0x1c, 0x5b,
	0x8e, 0x66, 0x93, 0xe1, 0x8b, 0x4c, 0x8b, 0x11, 0x12, 0xfa, 0x18, 0x90, 0x37, 0x55, 0x4f, 0x8f,
	0x34, 0x82, 0xad, 0xb3, 0x95, 0xb1, 0x9e, 0x5a, 0xd8, 0x41, 0xc6, 0x53, 0xf1, 0xc8, 0x1d, 0x4b,
	0x6f, 0xf1, 0xa5, 0x5d, 0x2e, 0xb1, 0xf1, 0x28, 0xe5, 0x35, 0xbe, 0x64, 0xfb, 0x69, 0x69, 0xe7,
	0xb2, 0x72, 0x59, 0xde, 0xf0, 0xf6, 0x93, 0x35, 0xd1, 0x2f, 0xa1, 0xac, 0x04, 0xfb, 0x4f, 0xc6,
	0x3a, 0xd5, 0xc6, 0xae, 0x45, 0xfd, 0xb0, 0xbc, 0x49, 0x59, 0x77, 0xc3, 0xfe, 0x5a, 0xb4, 0x1b,
	0xbd, 0x07, 0x1b, 0xb6, 0x23, 0x3b, 0x9a, 0x22, 0xc9, 0xaa, 0x6a, 0x61, 0xdb, 0x2e, 0x73, 0x54,
	0xa0, 0xc4, 0xa8, 0x15, 0x46, 0xe4, 0xff, 0xba, 0x0c, 0x8f, 0x16, 0x3b, 0x3c, 0x99, 0x9e, 0x0f,
	0x41, 0xcc, 0x6d, 0x5d, 0xf0, 0x9b, 0xe8, 0x43, 0xd8, 0x0a, 0xce, 0x15, 0xe9, 0x1c, 0x5b, 0x36,
	0x99, 0x17, 0x31, 0xba, 0x92, 0xc0, 0x05, 0x1d, 0x6f, 0x18, 0x9d, 0x98, 0xd3, 0x44, 0x36, 0xdc,
	0x53, 0x59, 0x71, 0x5c, 0x0b, 0x5b, 0xd4, 0xea, 0x4a, 0x42, 0x8c, 0x86, 0x4e, 0x00, 0xd9, 0xee,
	0x74, 0x6a, 0x5a, 0x0e, 0x56, 0xa5, 0x20, 0xe0, 0x2d, 0xd3, 0x38, 0xf3, 0xfc, 0xaa, 0x20, 0x15,
	0x04, 0x9b, 0xad, 0x00, 0x23, 0x70, 0x19, 0x11, 0x38, 0xc5, 0xb5, 0x2c, 0x6c, 0x38, 0x21, 0xec,
	0xca, 0x0d, 0x61, 0x37, 0x3d, 0x84, 0x00, 0xf4, 0x7d, 0xd8, 0x54, 0x74, 0xd9, 0xb6, 0x25, 0xf3,
	0x54, 0x52, 0x31, 0x89, 0x02, 0xd4, 0xb8, 0xd7, 0x85, 0x12, 0x25, 0xf7, 0x4e, 0xeb, 0x94, 0x88,
	0x10, 0x2c, 0x53, 0x4f, 0x5f, 0xa3, 0x9e, 0x4e, 0xbf, 0x89, 0x49, 0xd8, 0x67, 0xa6, 0xe5, 0xb0,
	0x18, 0x90, 0x67, 0x31, 0x82, 0x52, 0x68, 0x8c, 0x78, 0x0a, 0xeb, 0x9a, 0x2d, 0xc9, 0xe7, 0xb2,
	0xa6, 0x53, 0xdf, 0x62, 0x26, 0x5c, 0xd4, 0xec, 0x8a, 0x4f, 0x42, 0xbf, 0x82, 0x3d, 0x9b, 0xc5,
	0x1e, 0xff, 0x18, 0x94, 0xbc, 0x00, 0x67, 0xc8, 0x53, 0xcf, 0xa8, 0x77, 0x3d, 0x8e, 0x48, 0xac,
	0xc2, 0x56, 0x57, 0x9e, 0xa2, 0xaf, 0xe0, 0x7e, 0x8a, 0xf0, 0x54, 0x36, 0x5c, 0xcf, 0xe4, 0xcb,
	0x49, 0xd2, 0x7d, 0xd9, 0x70, 0xd1, 0x2f, 0xe1, 0x5e, 0x8a, 0xf8, 0xd8, 0xf0, 0xdc, 0x60, 0x27,
	0x49, 0xb8, 0x69, 0xf0, 0xdf, 0x01, 0x17, 0x3b, 0xd6, 0x45, 0xec, 0xa0, 0x2a, 0x6c, 0xc4, 0x8f,
	0xfa, 0x72, 0xf6, 0x49, 0xee, 0x79, 0xf1, 0x70, 0x2f, 0xb6, 0x37, 0x31, 0x16, 0x61, 0x46, 0x82,
	0x28, 0x99, 0x9e, 0x9e, 0x2c, 0x59, 0xa1, 0xdf, 0xfc, 0xbf, 0x03, 0x94, 0x62, 0x6c, 0x68, 0x03,
	0x96, 0x34, 0x16, 0x35, 0x4b, 0xc2, 0x92, 0xa6, 0x12, 0xdb, 0x36, 0x0d, 0x2c, 0x9e, 0x99, 0xfe,
	0x59, 0xe0, 0x37, 0x49, 0x64, 0xd3, 0x6c, 0x22, 0x75, 0xee, 0x07, 0xc8, 0xa0, 0x8d, 0x1e, 0x40,
	0x41, 0x9b, 0x4c, 0x5c, 0x27, 0x12, 0x16, 0x43, 0x02, 0xea, 0xc0, 0x86, 0xb7, 0x76, 0xd1, 0x91,
	0x89, 0x15, 0x7a, 0x96, 0xc6, 0x27, 0xad, 0x46, 0x8c, 0x71, 0xb6, 0x32, 0xc2, 0x8c, 0x2c, 0xfa,
	0x16, 0x90, 0x6b, 0x8f, 0x9a, 0xb2, 0x3a, 0xc6, 0x7e, 0x74, 0xc6, 0x2a, 0xb5, 0xb3, 0xe2, 0xe1,
	0xfb, 0x49, 0x88, 0x43, 0xb1, 0x3a, 0xc3, 0xdd, 0xca, 0x08, 0x09, 0x18, 0x48, 0x86, 0xed, 0x80,
	0x5a, 0x27, 0x41, 0xdd, 0x07, 0x5f, 0xa3, 0xe0, 0x3f, 0x5d, 0x08, 0x1e, 0x15, 0x68, 0x65, 0x84,
	0x64, 0x24, 0xd4, 0x86, 0x12, 0x49, 0x0a, 0x2b, 0x7d, 0x5f, 0x13, 0x79, 0x0a, 0xfd, 0x34, 0x09,
	0xfa, 0x24, 0xca, 0xd8, 0xca, 0x08, 0x71, 0x49, 0xa2, 0x07, 0x42, 0x08, 0xa6, 0x5f, 0xb1, 0x45,
	0x47, 0xa6, 0x7e, 0x91, 0xa2, 0x87, 0x93, 0x39, 0x6e, 0xa2, 0x87, 0x79, 0x0c, 0x9a, 0x5b, 0xd9,
	0x67, 0x1d, 0x73, 0xac, 0x19, 0xd4, 0x6d, 0x8a, 0x87, 0x0f, 0x12, 0x77, 0x4a, 0x6c, 0x51, 0x9e,
	0x56, 0x46, 0x08, 0xf8, 0x91, 0x00, 0x9c, 0x7a, 0xa6, 0x4c, 0x3b, 0x58, 0xb6, 0x71, 0xd3, 0x92,
	0x0d, 0xb2, 0xc6, 0x22, 0xc5, 0x78, 0x96, 0x84, 0x51, 0x6f, 0xd5, 0xfa, 0x51, 0xde, 0x56, 0x46,
	0x98, 0x93, 0x47, 0x47, 0xb0, 0x3e, 0xb6, 0x4c, 0x77, 0x2a, 0x60, 0x05, 0x13, 0xeb, 0x5b, 0xa7,
	0x78, 0x4f, 0x92, 0xf0, 0x9a, 0x11, 0xbe, 0x56, 0x46, 0x88, 0xc9, 0xa1, 0x21, 0x6c, 0x45, 0xdb,
	0xc7, 0xae, 0xee, 0x68, 0xf4, 0xf0, 0x29, 0x1e, 0xbe, 0x77, 0x15, 0x18, 0x65, 0x6e, 0x65, 0x84,
	0x79, 0x04, 0xf4, 0x02, 0x56, 0xc7, 0x53, 0xcd, 0x6c, 0x1b, 0xf4, 0xb0, 0x4a, 0x71, 0xd2, 0x66,
	0xbf, 0xdd, 0x6b, 0x13, 0x55, 0x79, 0xbc, 0xa8, 0x0e, 0x30, 0x92, 0xed, 0x33, 0x51, 0xb1, 0xb4,
	0xa9, 0x43, 0xcf, 0xae, 0x59, 0x87, 0xf0, 0xc2, 0x01, 0xd9, 0xee, 0x6a, 0xc0, 0xd9, 0xca, 0x0a,
	0x11, 0x39, 0x54, 0x81, 0xc2, 0x99, 0xa6, 0x7a, 0x20, 0x5c, 0x82, 0x2d, 0x45, 0x40, 0x5a, 0xed,
	0x7a, 0x80, 0x11, 0x4a, 0x21, 0x05, 0x76, 0x54, 0x3c, 0xd5, 0xcd, 0x4b, 0x3f, 0x8c, 0xfb, 0x79,
	0x76, 0x79, 0x2b, 0xc1, 0xec, 0x19, 0x5e, 0x3d, 0x51, 0xa0, 0x95, 0x15, 0x52, 0xa0, 0xd0, 0x3e,
	0xe4, 0x74, 0x73, 0x5c, 0x46, 0x14, 0x71, 0x27, 0x01, 0xb1, 0x63, 0x8e, 0x5b, 0x59, 0x81, 0x30,
	0xa1, 0x97, 0xb0, 0x46, 0x74, 0xd4, 0x73, 0x9d, 0xf2, 0x9d, 0x04, 0x85, 0x32, 0x7e, 0xa2, 0xcf,
	0x9e, 0x4b, 0x96, 0xe2, 0x33, 0xa3, 0x2f, 0xa1, 0x40, 0x37, 0x47, 0xc4, 0x86, 0x5a, 0xbe, 0x9b,
	0x60, 0xb7, 0x9e, 0xa4, 0xcf, 0x43, 0xd4, 0x10, 0x08, 0x54, 0x0b, 0xb0, 0xe6, 0x6d, 0x55, 0x35,
	0x0f, 0xab, 0x8c, 0x95, 0xdf, 0x85, 0xed, 0xc4, 0xb0, 0xc4, 0xdf, 0x87, 0x7b, 0xa9, 0xd1, 0x85,
	0x7f, 0x04, 0x0f, 0x16, 0x45, 0x07, 0x7e, 0x07, 0xee, 0x26, 0xb9, 0x78, 0x04, 0x74, 0xde, 0x55,
	0xf9, 0x4f, 0x60, 0x73, 0xc6, 0xef, 0x48, 0xd4, 0xd5, 0xc9, 0xc7, 0xd0, 0xf6, 0x52, 0xfd, 0x82,
	0x10, 0x12, 0xf8, 0x7b, 0xb0, 0x9b, 0xe2, 0x64, 0x7c, 0x1b, 0xee, 0x24, 0x98, 0x38, 0xc1, 0xa3,
	0xfa, 0x88, 0x5c, 0xba, 0x42, 0x02, 0xba, 0x0b, 0x2b, 0xe7, 0xb2, 0xee, 0xb2, 0x03, 0x65, 0x45,
	0x60, 0x0d, 0xfe, 0x2f, 0x59, 0x28, 0xa7, 0xb9, 0xcb, 0x15, 0x80, 0x3b, 0xb0, 0x4a, 0x31, 0xec,
	0x72, 0xee, 0x49, 0xee, 0xf9, 0x8a, 0xe0, 0xb5, 0xd0, 0x4b, 0xef, 0xb2, 0xb1, 0x4c, 0x2f, 0x1b,
	0x71, 0x9f, 0x98, 0x1b, 0x23, 0xbc, 0x66, 0xf0, 0xff, 0x95, 0x0d, 0x0e, 0x37, 0xe6, 0x6d, 0xe8,
	0x3e, 0x14, 0x88, 0x71, 0xb0, 0x94, 0x82, 0x8d, 0x9f, 0x27, 0x04, 0x3a, 0xfc, 0x57, 0x00, 0x53,
	0x57, 0xd7, 0x87, 0xd3, 0xba, 0x79, 0xc1, 0x92, 0xb4, 0x8d, 0xc3, 0x87, 0xf1, 0xc1, 0x28, 0x4a,
	0x3f, 0x60, 0x12, 0x22, 0x02, 0xe8, 0x33, 0x00, 0xe6, 0xc9, 0x0d, 0x75, 0xec, 0x5f, 0x8c, 0x76,
	0x13, 0xc4, 0x49, 0xb7, 0x10, 0x61, 0x45, 0x1f, 0xc0, 0xa6, 0x8a, 0x47, 0xa6, 0x6b, 0x28, 0x58,
	0x9a, 0x68, 0xba, 0xae, 0xb1, 0x7c, 0x2e, 0x27, 0x6c, 0xf8, 0xe4, 0x63, 0x4a, 0xe5, 0x3f, 0x83,
	0xed, 0xc4, 0x10, 0x80, 0x1e, 0x01, 0xd8, 0xf4, 0x2b, 0xa2, 0xd7, 0x08, 0x85, 0x7f, 0x09, 0x77,
	0x93, 0xdc, 0xfe, 0x4a, 0xb9, 0xff, 0xc9, 0xc2, 0x83, 0x45, 0xfe, 0x4d, 0x32, 0x56, 0x27, 0xe1,
	0x62, 0x1e, 0xa5, 0xa1, 0x57, 0xde, 0xee, 0x31, 0x85, 0xbe, 0xbc, 0x76, 0xf0, 0x38, 0xf0, 0x3f,
	0x22, 0x3b, 0x8a, 0xc3, 0x42, 0x00, 0xa1, 0xa2, 0x2d, 0x28, 0x1d, 0x0d, 0x3b, 0x1d, 0x49, 0x6c,
	0x0c, 0x06, 0xed, 0x6e, 0x53, 0xe4, 0x32, 0xa8, 0x08, 0x6b, 0xdd, 0xc6, 0xe0, 0xa4, 0x27, 0xbc,
	0xe6, 0xb2, 0x28, 0x0f, 0xcb, 0x27, 0xed, 0xa3, 0x36, 0xb7, 0x84, 0xd6, 0x20, 0x37, 0x14, 0xab,
	0x5c, 0x0e, 0x95, 0xa0, 0x50, 0xed, 0x0c, 0x1b, 0x83, 0x5e, 0x6f, 0xd0, 0xe2, 0x96, 0xd1, 0x1d,
	0xd8, 0x1c, 0x08, 0xed, 0x66, 0xb3, 0x21, 0x48, 0x95, 0xda, 0xa0, 0xdd, 0xeb, 0x8a, 0xdc, 0x0a,
	0x5f, 0x84, 0x42, 0x10, 0x84, 0xf8, 0x3f, 0x40, 0x29, 0x16, 0x61, 0x16, 0x1b, 0xd1, 0x27, 0x51,
	0xa7, 0xd8, 0x38, 0xbc, 0x37, 0x67, 0x00, 0x3d, 0xd7, 0x79, 0x43, 0x18, 0x7c, 0x7f, 0x69, 0xc0,
	0xe6, 0x4c, 0x18, 0xba, 0x95, 0xdb, 0x5d, 0xc0, 0x1e, 0x89, 0x11, 0xef, 0x50, 0x40, 0xf9, 0xc5,
	0x5c, 0x01, 0x25, 0x3e, 0xf9, 0x13, 0xed, 0x48, 0x4b, 0xa8, 0x9d, 0xfc, 0x4b, 0x0e, 0xd6, 0xa3,
	0x5d, 0x41, 0x2e, 0x9f, 0x8d, 0xe4, 0xf2, 0x7b, 0x90, 0x57, 0x35, 0x9b, 0xe4, 0x7e, 0xaa, 0x97,
	0x45, 0x06, 0x6d, 0x62, 0x84, 0x16, 0x1e, 0xbb, 0xba, 0xec, 0x98, 0xd6, 0xa5, 0x57, 0x1c, 0x8b,
	0x50, 0xd0, 0xd7, 0xb0, 0x4e, 0xd2, 0x63, 0xcd, 0x18, 0x4b, 0x13, 0x53, 0xf5, 0xa3, 0xc0, 0x83,
	0xb9, 0xb9, 0x9d, 0x30, 0xa6, 0x63, 0x53, 0xc5, 0x42, 0xf1, 0x22, 0x6c, 0xa0, 0x97, 0x50, 0x90,
	0x5d, 0xe7, 0x8c, 0x49, 0xaf, 0x24, 0x6c, 0x0b, 0x91, 0xae, 0xb8, 0xce, 0x19, 0x15, 0xcd, 0xcb,
	0xde, 0x17, 0xc9, 0x7c, 0x95, 0x33, 0xd9, 0x30, 0xb0, 0x4e, 0x93, 0xc9, 0x92, 0xe0, 0x37, 0xd1,
	0x01, 0xac, 0xca, 0x53, 0xa9, 0x2a, 0x8a, 0x5e, 0x22, 0xb8, 0x3b, 0x07, 0x57, 0x15, 0xc5, 0xda,
	0xe9, 0x58, 0x58, 0x91, 0xa7, 0x55, 0x51, 0x44, 0x5f, 0x93, 0x6b, 0x90, 0x46, 0xae, 0x56, 0x55,
	0x51, 0x94, 0x74, 0xcd, 0x76, 0xca, 0x79, 0x9a, 0xbe, 0xa7, 0x0a, 0x96, 0x18, 0x7f, 0x55, 0x14,
	0x3b, 0x9a, 0x4d, 0x4d, 0xee, 0x4c, 0x53, 0xb1, 0x64, 0xdb, 0x9a, 0x7f, 0x59, 0xcf, 0x13, 0x82,
	0x68, 0x6b, 0x2a, 0x09, 0x9b, 0x06, 0xfe, 0x7e, 0x62, 0x1a, 0xde, 0xbd, 0xd9, 0x6b, 0xf1, 0xff,
	0x91, 0x85, 0x02, 0xdd, 0x19, 0x87, 0xb8, 0xea, 0x01, 0x2c, 0x53, 0x05, 0x64, 0xa9, 0x02, 0xf6,
	0xe6, 0xb7, 0x96, 0x70, 0x51, 0x0d, 0x50, 0xbe, 0xe8, 0xea, 0x97, 0xe2, 0xab, 0x47, 0xb0, 0x4c,
	0xe7, 0xc1, 0xb6, 0x8a, 0x7e, 0xa3, 0x1a, 0xcc, 0xde, 0xfd, 0xbc, 0x3b, 0xe9, 0x02, 0x1b, 0x9a,
	0x95, 0xe0, 0x0f, 0x01, 0x42, 0x15, 0x90, 0x61, 0x44, 0xb1, 0x5d, 0xf7, 0xed, 0x88, 0x7c, 0x23,
	0x0e, 0x72, 0x7d, 0xf1, 0xb5, 0x77, 0x83, 0x21, 0x9f, 0xfc, 0x53, 0x28, 0x89, 0x8e, 0x45, 0xb6,
	0x1a, 0xdb, 0x36, 0x31, 0x75, 0x0e, 0x72, 0x13, 0x7b, 0xec, 0x57, 0xca, 0x26, 0xf6, 0x98, 0xff,
	0x19, 0xa0, 0x18, 0x4b, 0xc5, 0xb2, 0xe4, 0x4b, 0x62, 0x92, 0x13, 0x7b, 0x4c, 0xbf, 0xe9, 0x5d,
	0xaa, 0x20, 0x04, 0x6d, 0xfe, 0x00, 0xd6, 0x1b, 0xe7, 0xd8, 0x70, 0x3c, 0x6f, 0x22, 0x26, 0x4a,
	0x36, 0x0d, 0x1b, 0x24, 0xe8, 0x50, 0xe8, 0x9c, 0x10, 0xa1, 0xf0, 0x32, 0x00, 0xe5, 0xa7, 0x8e,
	0x8d, 0xf6, 0x60, 0xcd, 0xb1, 0xe9, 0x80, 0x6c, 0x16, 0xad, 0x8c, 0xe0, 0x13, 0xd0, 0x0e, 0xac,
	0x38, 0x23, 0xd3, 0x64, 0x3a, 0xcd, 0xb7, 0x32, 0x02, 0x6b, 0xa2, 0x32, 0xac, 0x3a, 0x9a, 0xe1,
	0xbc, 0x7c, 0x41, 0xb5, 0x9a, 0x23, 0x69, 0x21, 0x6b, 0x57, 0x57, 0x20, 0x77, 0x2e, 0xeb, 0x7c,
	0x07, 0x56, 0xe8, 0x10, 0x44, 0x2d, 0x4e, 0x38, 0x0b, 0x56, 0x4f, 0xfb, 0x24, 0x38, 0x38, 0x97,
	0x12, 0xcc, 0x2a, 0x9c, 0x9a, 0x7f, 0xa2, 0xf2, 0x7f, 0x84, 0xbb, 0xc4, 0xf7, 0xeb, 0x9a, 0xd5,
	0xb3, 0x8e, 0x34, 0x1d, 0xfb, 0x0b, 0xe5, 0x20, 0xa7, 0x6a, 0x7e, 0xea, 0x40, 0x3e, 0x89, 0x71,
	0x4d, 0x2d, 0x7c, 0xaa, 0x7d, 0xef, 0x29, 0xdd, 0x6b, 0x11, 0x95, 0x98, 0x86, 0x7e, 0x79, 0x64,
	0xea, 0xaa, 0x57, 0xa9, 0xc8, 0x0b, 0x11, 0x0a, 0x39, 0xab, 0x66, 0x46, 0xb0, 0xa7, 0xa6, 0x61,
	0x63, 0xe6, 0xee, 0xb6, 0xab, 0x3b, 0x7d, 0x39, 0x28, 0xb5, 0x47, 0x28, 0xfc, 0x3f, 0x67, 0x61,
	0x53, 0xc0, 0xb2, 0x1a, 0x9d, 0xd6, 0x2f, 0x60, 0xf5, 0x94, 0x0d, 0x94, 0x4d, 0x38, 0x95, 0x2b,
	0x8a, 0x82, 0x6d, 0x5b, 0x1b, 0xe9, 0x98, 0x8d, 0x2d, 0x78, 0xcc, 0x64, 0x8b, 0x4f, 0x35, 0x1d,
	0x1b, 0xe1, 0xa5, 0x37, 0x68, 0x93, 0x28, 0x6a, 0x93, 0xc3, 0x90, 0xe9, 0x5b, 0x60, 0x0d, 0xb2,
	0x7e, 0x1d, 0x1b, 0xde, 0xf1, 0x4b, 0x3e, 0xf9, 0x3a, 0x70, 0xe1, 0x6c, 0xbc, 0x25, 0x3c, 0x80,
	0x82, 0x85, 0x65, 0xb5, 0x66, 0xba, 0x86, 0xe3, 0xed, 0x43, 0x48, 0x20, 0x1b, 0xa4, 0xca, 0x8e,
	0x4c, 0x47, 0x5c, 0x17, 0xe8, 0x37, 0xff, 0x9f, 0x59, 0xe0, 0x4e, 0x2c, 0xcd, 0xc1, 0x3f, 0xf2,
	0xaa, 0x76, 0x48, 0x60, 0x9a, 0x92, 0x74, 0x97, 0xed, 0x88, 0xd7, 0xa2, 0x95, 0x25, 0xd7, 0x76,
	0xba, 0xa6, 0xd3, 0xf8, 0x9e, 0x44, 0x1f, 0xaf, 0x50, 0x19, 0xa5, 0x05, 0xf3, 0x5e, 0x89, 0xcc,
	0xfb, 0x3d, 0xd8, 0x24, 0x33, 0x6e, 0x1b, 0xa7, 0xa6, 0x3f, 0x6b, 0x04, 0xcb, 0xd3, 0x70, 0xe7,
	0xe8, 0x37, 0xff, 0x27, 0xe0, 0x42, 0x36, 0x4f, 0x49, 0x49, 0xc7, 0x00, 0x89, 0x1c, 0xda, 0xdf,
	0xb3, 0x69, 0xe7, 0x04, 0xfa, 0x4d, 0x68, 0x34, 0x2e, 0xb1, 0x62, 0x57, 0x10, 0x7b, 0x26, 0xa6,
	0x3a, 0xd0, 0xbc, 0xda, 0x70, 0x4e, 0xf0, 0x9b, 0x64, 0xdb, 0x34, 0xbb, 0xae, 0x59, 0x5e, 0x29,
	0x95, 0x35, 0xf8, 0xdf, 0x02, 0x17, 0x24, 0x35, 0x11, 0x9f, 0x65, 0x99, 0x4c, 0xd4, 0xce, 0x42,
	0x0a, 0x7a, 0x1f, 0x36, 0x1c, 0x6d, 0x82, 0x4d, 0xd7, 0x11, 0xb1, 0x62, 0x1a, 0xaa, 0xed, 0x85,
	0xb9, 0x19, 0x2a, 0xff, 0x08, 0xd6, 0x03, 0xec, 0x57, 0xe6, 0x68, 0xb6, 0x3e, 0xc2, 0x3f, 0x8b,
	0x8c, 0xfd, 0xca, 0x1c, 0xd1, 0x70, 0xcd, 0x41, 0x4e, 0x53, 0x59, 0x89, 0xa6, 0x24, 0x90, 0x4f,
	0xfe, 0x0d, 0x94, 0x5b, 0xed, 0xba, 0xe0, 0x1a, 0x86, 0x66, 0x8c, 0x5f, 0x99, 0x23, 0x1a, 0x6d,
	0x05, 0x6a, 0xf5, 0x11, 0xc4, 0x1c, 0xad, 0xb8, 0x20, 0x58, 0x3e, 0x9f, 0xb4, 0x55, 0x5f, 0x4b,
	0xe4, 0x9b, 0x6c, 0xac, 0x6d, 0xba, 0x96, 0x82, 0xbd, 0xa8, 0xeb, 0xb5, 0xf8, 0x3f, 0xc1, 0x66,
	0x64, 0xe5, 0x14, 0xee, 0x43, 0xc8, 0x7d, 0x67, 0x8e, 0xbc, 0x77, 0x8b, 0x78, 0xf8, 0x8d, 0x4e,
	0x54, 0x20, 0x5c, 0x44, 0x4b, 0x9a, 0x7d, 0xa4, 0x19, 0x9a, 0x7d, 0x16, 0x1c, 0xcd, 0x11, 0x4a,
	0xe8, 0xad, 0xaf, 0x6c, 0xd3, 0x08, 0x0f, 0x67, 0x9f, 0xc2, 0x1f, 0x40, 0xb1, 0xd3, 0xa8, 0x07,
	0x67, 0xff, 0x63, 0x28, 0x8e, 0x68, 0x45, 0x5b, 0x09, 0x7c, 0xa3, 0x24, 0x00, 0x25, 0x51, 0xe7,
	0xe0, 0xbf, 0x87, 0x7b, 0x43, 0xb1, 0xfa, 0x0e, 0x59, 0xca, 0x67, 0x73, 0x59, 0x4a, 0xfc, 0x9d,
	0x89, 0xdd, 0xae, 0x12, 0xf2, 0x94, 0xbf, 0xae, 0xc0, 0x46, 0xbc, 0x93, 0x98, 0x19, 0x36, 0x58,
	0x52, 0xe2, 0xbd, 0x12, 0x78, 0x4d, 0xb2, 0x81, 0xe7, 0x9a, 0xea, 0x9f, 0x33, 0xe7, 0x9a, 0xca,
	0x1e, 0x60, 0xfc, 0x33, 0x8f, 0x7c, 0xce, 0x55, 0x6b, 0xd9, 0x2b, 0x46, 0xbc, 0x5a, 0x4b, 0xeb,
	0xd6, 0xa6, 0xea, 0x2a, 0x8e, 0xf7, 0x88, 0xe1, 0x37, 0xe9, 0x86, 0x62, 0x4b, 0x93, 0x59, 0x6e,
	0x41, 0x36, 0x94, 0xb6, 0xd0, 0x23, 0x28, 0xba, 0x36, 0x96, 0x6a, 0xf5, 0x9a, 0xd4, 0xa8, 0x1d,
	0x7b, 0x85, 0xfd, 0x82, 0x6b, 0xe3, 0x5a, 0xbd, 0xd6, 0xa8, 0x1d, 0x93, 0x4c, 0x80, 0xf4, 0x0b,
	0xdd, 0x7a, 0x5b, 0xf4, 0x2a, 0xfa, 0x79, 0xd7, 0xc6, 0xb4, 0x8d, 0x9e, 0x03, 0x47, 0x3a, 0x5b,
	0xed, 0xba, 0xf4, 0xba, 0xf1, 0x9b, 0x6a, 0xaf, 0x22, 0xd4, 0xbd, 0x6c, 0x61, 0xc3, 0xb5, 0x71,
	0xab, 0x5d, 0xf7, 0xa9, 0x88, 0x87, 0x92, 0xcf, 0x79, 0xdc, 0x1b, 0x8a, 0x0d, 0xaf, 0x1a, 0x5a,
	0x64, 0x6c, 0x94, 0xe4, 0x4f, 0x85, 0xf0, 0x08, 0x95, 0x13, 0xaf, 0xe2, 0x59, 0x60, 0x1c, 0x42,
	0xe5, 0x04, 0xed, 0xc2, 0x1a, 0xe9, 0x1f, 0x1e, 0x8b, 0x5e, 0x41, 0x73, 0xd5, 0xb5, 0xf1, 0xf0,
	0x58, 0x44, 0x0f, 0x01, 0x48, 0x87, 0xd8, 0x10, 0xda, 0x95, 0x8e, 0x5f, 0xcc, 0x77, 0x6d, 0xcc,
	0x08, 0xe8, 0x15, 0x6c, 0x58, 0x86, 0xaa, 0xd9, 0x61, 0x9d, 0x79, 0x23, 0xe1, 0x99, 0x2c, 0xbe,
	0x57, 0x0d, 0xe7, 0x0c, 0x5b, 0x06, 0x76, 0x84, 0x12, 0x15, 0x0d, 0xb6, 0xf0, 0x18, 0x38, 0x45,
	0x55, 0x24, 0xac, 0x4c, 0x42, 0xb4, 0xcd, 0xeb, 0xa3, 0x6d, 0x28, 0xaa, 0xd2, 0x50, 0x26, 0x01,
	0x5c, 0x05, 0xd6, 0xdd, 0x49, 0x64, 0x62, 0x5c, 0xc2, 0x43, 0x62, 0x1c, 0x6a, 0x78, 0x2c, 0x0a,
	0x45, 0x77, 0x12, 0xce, 0xe8, 0x53, 0xd8, 0x56, 0xf1, 0xb9, 0x44, 0xe2, 0xa2, 0x74, 0xa6, 0xa9,
	0xd2, 0x5b, 0x7c, 0x39, 0x32, 0x65, 0x4b, 0xa5, 0xa5, 0x8e, 0x82, 0x80, 0x54, 0x7c, 0x4e, 0xe2,
	0x4f, 0x4b, 0x53, 0x5f, 0x7b, 0x3d, 0xe8, 0x43, 0x40, 0x31, 0x91, 0x89, 0xe9, 0xda, 0x98, 0x96,
	0x3a, 0x0a, 0xc2, 0x66, 0xc8, 0x7f, 0x4c, 0xc8, 0xe8, 0x03, 0xe0, 0x62, 0xcc, 0x96, 0x7c, 0x41,
	0x6b, 0x1b, 0x05, 0xa1, 0x14, 0xb2, 0x0a, 0xf2, 0x05, 0xdf, 0x87, 0x9d, 0xe4, 0x55, 0xd3, 0x6c,
	0xd2, 0xb4, 0x1d, 0xfa, 0xec, 0xe1, 0x5f, 0x60, 0x08, 0xa1, 0xa2, 0xaa, 0x16, 0xba, 0x07, 0x79,
	0x82, 0x4f, 0xfb, 0x98, 0xfd, 0xaf, 0xa9, 0xf8, 0x9c, 0x74, 0xf1, 0x5f, 0xc1, 0xd6, 0xdc, 0xe2,
	0x49, 0x44, 0x56, 0x54, 0xcb, 0x9c, 0x78, 0x2e, 0xc4, 0x1a, 0x24, 0x86, 0x91, 0x43, 0xc9, 0xaf,
	0x35, 0x93, 0x6f, 0xfe, 0x2f, 0x59, 0x78, 0x14, 0x68, 0xfe, 0xf6, 0x11, 0xa0, 0x3a, 0x17, 0x01,
	0xe2, 0xc5, 0x4d, 0x7f, 0x88, 0xb6, 0xe1, 0x60, 0xeb, 0x54, 0x56, 0x70, 0x42, 0x30, 0x90, 0xe0,
	0x29, 0xbb, 0x74, 0x62, 0x35, 0x95, 0x1d, 0x7d, 0x01, 0xcb, 0x34, 0x55, 0x67, 0x95, 0xf6, 0xeb,
	0x0e, 0x42, 0x65, 0xf8, 0x3f, 0xe7, 0xe0, 0x5e, 0x3a, 0x72, 0xd2, 0xd9, 0xf8, 0xb5, 0x77, 0x0e,
	0xb2, 0x7b, 0xe3, 0x87, 0xd7, 0x1b, 0xed, 0x20, 0x92, 0xb0, 0x93, 0x50, 0x3e, 0xf5, 0x1e, 0xad,
	0x5e, 0xf8, 0xa1, 0x3a, 0xa4, 0x90, 0xbc, 0xc1, 0xc0, 0xce, 0x44, 0xb6, 0xdf, 0xbe, 0xf0, 0x62,
	0x55, 0xd0, 0x8e, 0x46, 0xc2, 0x95, 0x78, 0x24, 0xec, 0x01, 0x52, 0xcf, 0x94, 0x29, 0x7b, 0x9c,
	0x08, 0x72, 0x7b, 0x56, 0x5c, 0x7f, 0x1c, 0x9b, 0x64, 0xbd, 0x55, 0xeb, 0xc7, 0xd9, 0x84, 0x04,
	0x51, 0xf4, 0x0c, 0x4a, 0xfe, 0x36, 0xb4, 0x8d, 0xa1, 0x8d, 0xbd, 0x10, 0x17, 0x27, 0xf2, 0x35,
	0x58, 0xa6, 0x77, 0x30, 0x80, 0xd5, 0xe3, 0x4a, 0x77, 0x58, 0xe9, 0x70, 0x19, 0xb4, 0x09, 0x45,
	0x32, 0x86, 0x54, 0xeb, 0xb4, 0x1b, 0xdd, 0x01, 0x97, 0x0d, 0x08, 0x62, 0x43, 0x78, 0xd3, 0x10,
	0xb8, 0x25, 0x72, 0xb7, 0x1f, 0x76, 0x8f, 0x2b, 0xdd, 0x4a, 0xb3, 0x51, 0xe7, 0x72, 0xfc, 0xff,
	0xe5, 0x00, 0xcd, 0xcf, 0x2a, 0xcc, 0xe6, 0xfb, 0xa6, 0x15, 0x9c, 0x51, 0x21, 0x05, 0x3d, 0x87,
	0x4d, 0xd6, 0x0a, 0xd4, 0xed, 0xff, 0xbe, 0x63, 0x86, 0x4c, 0xeb, 0x6d, 0x58, 0xb6, 0x69, 0x56,
	0xe7, 0x69, 0x3c, 0x24, 0xa0, 0x7d, 0xe0, 0x0c, 0xd3, 0x21, 0x17, 0x4b, 0xd3, 0xd2, 0x1c, 0x99,
	0xbe, 0x93, 0xb0, 0xc4, 0x6b, 0x8e, 0x8e, 0x0e, 0x00, 0xa9, 0x66, 0xd7, 0x74, 0xaa, 0x9a, 0xa1,
	0x86, 0xc3, 0xb2, 0xbd, 0x48, 0xe8, 0x21, 0xd9, 0x8b, 0x22, 0xeb, 0xfa, 0x48, 0x56, 0xde, 0x7a,
	0xb5, 0x5e, 0x76, 0x8c, 0xcc, 0x50, 0xd1, 0x0b, 0x58, 0xb5, 0x64, 0x63, 0x8c, 0xed, 0xf2, 0x1a,
	0xb5, 0xe2, 0x07, 0x29, 0x5b, 0x26, 0x10, 0x26, 0xc1, 0xe3, 0x45, 0x47, 0xb0, 0x66, 0x4e, 0xd9,
	0x33, 0x13, 0xbb, 0xa7, 0x7e, 0x74, 0xc5, 0x4e, 0x1f, 0xf4, 0x18, 0x7b, 0xc3, 0x70, 0xac, 0x4b,
	0xc1, 0x17, 0x46, 0x35, 0x28, 0xb2, 0xb7, 0xd4, 0x96, 0x69, 0x3b, 0x76, 0xb9, 0x40, 0xb1, 0x9e,
	0xa6, 0x61, 0x05, 0x9c, 0x42, 0x54, 0x6a, 0xef, 0x0b, 0x58, 0x8f, 0xa2, 0x93, 0x93, 0xf8, 0x2d,
	0xbe, 0xf4, 0xf6, 0x8d, 0x7c, 0xc6, 0x2b, 0x22, 0x05, 0xaf, 0x22, 0xf2, 0xc5, 0xd2, 0xe7, 0x59,
	0xde, 0x84, 0xcd, 0x99, 0x35, 0xd2, 0x8c, 0x86, 0x7c, 0x74, 0xcc, 0x8b, 0xa0, 0x48, 0x1a, 0xa1,
	0x04, 0xfd, 0xc3, 0xe9, 0x14, 0xfb, 0x11, 0x30, 0x42, 0x09, 0xf6, 0x9c, 0x66, 0xa7, 0xd1, 0x3d,
	0x27, 0x04, 0xfe, 0x73, 0xb8, 0x9b, 0xb4, 0x22, 0x7a, 0x2b, 0x95, 0x95, 0xe0, 0x56, 0x2a, 0x2b,
	0x34, 0xeb, 0x9b, 0x7a, 0xf8, 0x4b, 0xda, 0x94, 0x5f, 0x83, 0x95, 0xc6, 0x64, 0xea, 0x5c, 0xee,
	0x7f, 0x1e, 0xf9, 0x69, 0xc3, 0xfc, 0x2f, 0x28, 0xd0, 0x1a, 0xe4, 0xba, 0x95, 0x3e, 0x97, 0x41,
	0x79, 0x58, 0xee, 0x57, 0xba, 0x43, 0x2e, 0x8b, 0x56, 0x61, 0xa9, 0xd9, 0xe5, 0x96, 0xf6, 0x5f,
	0xc1, 0x76, 0x62, 0x39, 0x14, 0xad, 0x43, 0x5e, 0x6c, 0x7c, 0x33, 0x6c, 0x74, 0x6b, 0x0d, 0x2e,
	0x43, 0x10, 0x2a, 0xdd, 0x3a, 0x93, 0xeb, 0x11, 0xb7, 0x41, 0xb0, 0xd1, 0xf8, 0xb6, 0x52, 0x1b,
	0x48, 0x01, 0x53, 0x6e, 0xff, 0x63, 0xe0, 0x66, 0xab, 0x9d, 0x84, 0x7f, 0xe8, 0x8d, 0x5c, 0xef,
	0x9d, 0x74, 0xb9, 0x2c, 0x81, 0xea, 0x1d, 0x1d, 0x71, 0x4b, 0xfb, 0x9f, 0x00, 0x84, 0xd5, 0x4d,
	0xe2, 0xb5, 0x42, 0x5b, 0x6c, 0x77, 0x9b, 0xac, 0x1e, 0x77, 0x54, 0xe9, 0x74, 0x48, 0x83, 0xd6,
	0xe3, 0xaa, 0xbd, 0x41, 0x8b, 0x5b, 0xda, 0xff, 0x18, 0xd6, 0xa3, 0xd5, 0x30, 0x82, 0xd4, 0xe9,
	0x9d, 0x30, 0xf0, 0x56, 0xbb, 0xd9, 0xe2, 0xb2, 0x04, 0x65, 0xd0, 0x6b, 0x36, 0x3b, 0x0d, 0x6e,
	0x69, 0xbf, 0x0e, 0x9b, 0x33, 0x35, 0x1e, 0x02, 0x3c, 0xec, 0xbe, 0xee, 0x92, 0x89, 0x64, 0xc8,
	0xd4, 0x2a, 0x7d, 0x36, 0x21, 0x71, 0x50, 0xe1, 0x96, 0xd0, 0x1d, 0xd8, 0x14, 0x07, 0x15, 0xe9,
	0xa8, 0xd2, 0xee, 0xf4, 0xde, 0x34, 0x04, 0xa9, 0xd2, 0xe7, 0x72, 0xfb, 0x75, 0x28, 0xc5, 0x4a,
	0x1d, 0x68, 0x1b, 0xb6, 0x08, 0x57, 0xb7, 0x37, 0x90, 0x6a, 0xbd, 0x6e, 0xb7, 0x51, 0x1b, 0x34,
	0xea, 0x5c, 0x06, 0x15, 0x60, 0xa5, 0xd2, 0x97, 0x86, 0x04, 0x70, 0x0b, 0x4a, 0x84, 0x23, 0xec,
	0x5d, 0xda, 0x7f, 0x9f, 0x15, 0xbc, 0xfc, 0x8a, 0x11, 0xd1, 0xee, 0x49, 0xbf, 0x72, 0x28, 0xf5,
	0xc5, 0xd7, 0x6c, 0xfe, 0xbd, 0x7e, 0xa3, 0xcb, 0x65, 0xf7, 0xff, 0x06, 0xb8, 0xd9, 0x4b, 0x1c,
	0x99, 0xdf, 0xe0, 0x98, 0xe8, 0x90, 0x83, 0xf5, 0x6a, 0x45, 0x6c, 0x49, 0x62, 0x4d, 0x68, 0xf7,
	0x07, 0x22, 0x8b, 0x66, 0x24, 0xd5, 0xf2, 0x09, 0x4b, 0x87, 0xff, 0xf6, 0x12, 0x56, 0xfb, 0x2f,
	0x4e, 0xba, 0xfd, 0x4f, 0xd1, 0x29, 0x3c, 0x6d, 0x62, 0xe7, 0x8a, 0x5f, 0x21, 0xa0, 0xf8, 0x99,
	0x41, 0x8c, 0x69, 0xef, 0x26, 0xbf, 0x5b, 0xe2, 0x33, 0xe8, 0xcf, 0x59, 0x78, 0xc6, 0x0e, 0xc6,
	0x2b, 0xc6, 0xba, 0x09, 0xee, 0x4d, 0x27, 0xf1, 0x06, 0xee, 0x45, 0x17, 0x1b, 0xff, 0x21, 0x54,
	0xd2, 0x22, 0xaf, 0xf3, 0xfb, 0x2a, 0x3e, 0x83, 0xbe, 0x83, 0x07, 0x33, 0x6b, 0x8b, 0x43, 0x5f,
	0x07, 0xe6, 0xba, 0x63, 0x7d, 0x0b, 0x7b, 0x62, 0x64, 0x0d, 0x33, 0xbf, 0xcf, 0x7a, 0x76, 0x9d,
	0xdf, 0x4b, 0xed, 0x25, 0x2c, 0x95, 0xcf, 0xa0, 0xdf, 0xc1, 0xee, 0xcc, 0x2a, 0xc2, 0x83, 0x6d,
	0xf1, 0x0f, 0xde, 0xf6, 0xae, 0xe8, 0xe7, 0x33, 0xe8, 0xf7, 0xb0, 0x43, 0x52, 0x31, 0x3c, 0x8f,
	0xfd, 0x51, 0xb2, 0x6c, 0x72, 0x1e, 0x97, 0x32, 0xf5, 0xdf, 0xc2, 0x5e, 0x13, 0x3b, 0x74, 0x00,
	0x75, 0x7e, 0x84, 0x78, 0x49, 0x32, 0x56, 0xb1, 0xbb, 0xc6, 0xcc, 0xff, 0x00, 0x0f, 0xbd, 0x67,
	0x84, 0x1f, 0x05, 0xfe, 0x1b, 0x02, 0xaf, 0x63, 0xf6, 0x9b, 0xc8, 0x9b, 0xc2, 0x27, 0x6b, 0x43,
	0x80, 0x47, 0x14, 0xcc, 0x4f, 0x44, 0x7f, 0x08, 0xcc, 0x01, 0xdc, 0xef, 0x68, 0x76, 0xaa, 0x8a,
	0x93, 0x9c, 0xe7, 0x71, 0xfa, 0x20, 0xac, 0x18, 0x9a, 0x41, 0xc7, 0x50, 0x6e, 0x62, 0xc7, 0x9f,
	0x67, 0xec, 0x0a, 0x90, 0x08, 0xb9, 0xe8, 0x46, 0x4e, 0x75, 0x79, 0x87, 0x61, 0xc5, 0x91, 0x16,
	0x49, 0x5d, 0x05, 0xf9, 0x6b, 0xd8, 0x68, 0x62, 0x27, 0x5a, 0x89, 0x48, 0x9a, 0x57, 0x39, 0x46,
	0x8b, 0x70, 0x33, 0x04, 0x31, 0x8e, 0x90, 0xca, 0x9d, 0xa2, 0xfb, 0x3a, 0xac, 0x1f, 0x9b, 0xae,
	0xe1, 0x0c, 0x8f, 0x45, 0x9a, 0xfe, 0x5d, 0x71, 0x6b, 0x4c, 0x41, 0xe9, 0x03, 0x47, 0x77, 0x6f,
	0x28, 0x56, 0xc3, 0x5f, 0x51, 0xc5, 0x38, 0x53, 0xeb, 0x27, 0x29, 0x88, 0xdf, 0xc0, 0xdd, 0xc0,
	0xeb, 0xa2, 0xa8, 0x8b, 0xac, 0xeb, 0x0a, 0x75, 0x0f, 0xfc, 0x18, 0xf4, 0x83, 0xa2, 0xbe, 0x26,
	0xa8, 0xa1, 0x8f, 0x5d, 0x17, 0x35, 0x79, 0xd5, 0x1d, 0x28, 0xc7, 0xbc, 0xeb, 0xdd, 0xd0, 0xba,
	0xb0, 0x1d, 0xfa, 0x55, 0x14, 0xea, 0x96, 0x1e, 0xf5, 0x0a, 0xb6, 0x08, 0xde, 0x70, 0x62, 0xb7,
	0x27, 0xf2, 0x18, 0xd7, 0xd8, 0x9d, 0xf9, 0x76, 0x58, 0x3d, 0xd8, 0x89, 0x62, 0x1d, 0xe9, 0xb2,
	0x7d, 0xa6, 0x5a, 0xe4, 0x52, 0x71, 0x6b, 0x77, 0x5f, 0x67, 0xb5, 0x4a, 0xef, 0x0e, 0xf1, 0x30,
	0xb9, 0x86, 0xe8, 0x19, 0xe1, 0xde, 0x83, 0xb4, 0x6e, 0xdb, 0xd5, 0x1d, 0x0a, 0xb7, 0x19, 0x85,
	0x7b, 0x65, 0x8e, 0xae, 0x42, 0x4c, 0x2f, 0x5a, 0xd2, 0xb0, 0xb9, 0xdd, 0x6a, 0xd7, 0x89, 0x45,
	0x07, 0x95, 0x4c, 0x56, 0xf7, 0x4c, 0x97, 0xba, 0x72, 0x8a, 0x0d, 0x40, 0xad, 0x76, 0xbd, 0x26,
	0x1b, 0x0a, 0xd6, 0xc3, 0x59, 0x2e, 0x00, 0x4c, 0xb3, 0x92, 0x5d, 0x36, 0x35, 0xaf, 0xce, 0x1b,
	0xf0, 0x27, 0xdb, 0xc9, 0xc3, 0x54, 0x7c, 0xb2, 0x9f, 0x7c, 0x06, 0x55, 0x61, 0x27, 0x98, 0x56,
	0x45, 0xd7, 0xaf, 0x80, 0x4b, 0x4b, 0x17, 0xb6, 0x63, 0x73, 0xf2, 0x6b, 0xcf, 0x8b, 0x56, 0xf7,
	0xde, 0x6c, 0x57, 0x62, 0xdd, 0x9a, 0x4e, 0xb0, 0x78, 0x24, 0x06, 0xef, 0x1a, 0x33, 0xdb, 0x3a,
	0xfb, 0xde, 0x91, 0x32, 0xc1, 0xd7, 0x00, 0x47, 0xa2, 0xff, 0xc4, 0x82, 0xe2, 0x3b, 0x35, 0xf3,
	0x0e, 0x34, 0xa3, 0xb1, 0xd9, 0x77, 0x19, 0xba, 0x03, 0xa5, 0x23, 0xb1, 0x89, 0x1d, 0xff, 0x35,
	0x62, 0x06, 0x6f, 0xe6, 0x2d, 0x63, 0x06, 0x6f, 0xf6, 0x09, 0x83, 0xcf, 0xa0, 0x3f, 0xc2, 0xf6,
	0x91, 0x58, 0xb3, 0xb0, 0xec, 0xe0, 0xd8, 0x6b, 0x16, 0x9a, 0xf9, 0x7d, 0x5e, 0xc2, 0x5b, 0xda,
	0x1e, 0xbf, 0x88, 0x25, 0x18, 0xe1, 0xd7, 0x50, 0xa4, 0xef, 0x73, 0x1d, 0x5a, 0x5a, 0x98, 0xd9,
	0x95, 0xe8, 0x23, 0xe4, 0xac, 0xfa, 0x48, 0x17, 0x9f, 0xf9, 0x59, 0x16, 0x35, 0xa1, 0xd8, 0x50,
	0xce, 0x82, 0xf7, 0x99, 0x45, 0xc1, 0x6d, 0x41, 0x1f, 0x9f, 0x41, 0x6d, 0x40, 0x2c, 0x5a, 0xc6,
	0x9e, 0xf3, 0xd3, 0x1f, 0x70, 0xf7, 0x76, 0x92, 0x1f, 0x91, 0xf9, 0x0c, 0xfa, 0x12, 0xd6, 0x9b,
	0xd8, 0x09, 0x1f, 0x9f, 0x93, 0xec, 0x35, 0x5d, 0xfa, 0x88, 0x45, 0x34, 0x6c, 0x04, 0xc4, 0xda,
	0x19, 0x2b, 0x4c, 0xdc, 0x0c, 0x47, 0x80, 0x2d, 0x1a, 0xb1, 0x4f, 0xb4, 0xd3, 0x70, 0x3d, 0x1f,
	0xcc, 0xb0, 0xa7, 0xfd, 0x66, 0x22, 0xf5, 0x7c, 0xde, 0x0e, 0x4e, 0xd3, 0x18, 0xee, 0x22, 0xbd,
	0xa7, 0xeb, 0x90, 0x22, 0x96, 0xa3, 0x87, 0xe9, 0xb5, 0x41, 0xd3, 0xd7, 0xdd, 0x21, 0x88, 0xe1,
	0x41, 0x7a, 0x6d, 0xc4, 0xe4, 0x15, 0x1f, 0xc3, 0xbd, 0xd8, 0x49, 0xfa, 0x8e, 0x70, 0xde, 0x71,
	0x95, 0x30, 0xb5, 0x5b, 0x1e, 0x57, 0x12, 0x3c, 0x66, 0x53, 0x4b, 0xaf, 0xb7, 0x5e, 0xb3, 0x76,
	0x9b, 0x32, 0x63, 0x13, 0x3e, 0x68, 0x62, 0xa7, 0xa2, 0xeb, 0x57, 0x97, 0x8c, 0x93, 0x96, 0x70,
	0x10, 0xaf, 0x77, 0x5d, 0x85, 0xc1, 0x67, 0x90, 0x0e, 0xcf, 0x22, 0xf9, 0x76, 0xfa, 0x68, 0x8b,
	0x94, 0x7f, 0xcd, 0x25, 0xf3, 0x19, 0xa4, 0x78, 0xf7, 0x90, 0xf4, 0x71, 0x92, 0x8b, 0xd1, 0x37,
	0x72, 0x9b, 0xef, 0x80, 0x0f, 0xdc, 0xe6, 0xc7, 0x5e, 0xd0, 0x6f, 0xe0, 0xbd, 0xa8, 0x43, 0xdd,
	0x6e, 0xb8, 0xe4, 0x65, 0x50, 0xe8, 0xd0, 0xb3, 0x7e, 0x48, 0xe8, 0xdf, 0xc3, 0x4f, 0x42, 0xbf,
	0xb8, 0x99, 0x85, 0x5d, 0xc3, 0x49, 0x04, 0xb8, 0x1f, 0x31, 0xa9, 0xb9, 0x3f, 0x2f, 0xb8, 0x3a,
	0x3d, 0x99, 0x15, 0xa1, 0x8e, 0xe7, 0x5d, 0xb9, 0x67, 0xfb, 0x04, 0x3c, 0xd5, 0x65, 0x65, 0x36,
	0x1f, 0x98, 0xe5, 0xba, 0x7a, 0x80, 0xdf, 0xc1, 0xbd, 0xe4, 0x01, 0x2a, 0xaa, 0xfa, 0xce, 0xe0,
	0x7f, 0xeb, 0x57, 0x83, 0xe6, 0x67, 0x3f, 0x31, 0xcf, 0xf1, 0x8f, 0x87, 0x3f, 0x9c, 0xaa, 0xe4,
	0x48, 0x7c, 0x57, 0xfc, 0xd8, 0x55, 0x7f, 0xb6, 0xff, 0xd6, 0x76, 0xd2, 0x81, 0x6d, 0x8a, 0x38,
	0x67, 0x21, 0x57, 0x4c, 0x37, 0xd9, 0xa6, 0x47, 0xf0, 0x93, 0xa8, 0x27, 0xa6, 0xd9, 0xc9, 0x22,
	0x67, 0xb9, 0x86, 0x9e, 0x1f, 0x2f, 0x1a, 0x83, 0x98, 0xca, 0x3b, 0xe1, 0xf7, 0xc9, 0x3e, 0x86,
	0x2e, 0x3f, 0xa7, 0x98, 0x9b, 0x7b, 0xfa, 0x37, 0xb0, 0x7b, 0x22, 0x6b, 0x4e, 0xd2, 0x0f, 0xae,
	0xaf, 0xfc, 0x13, 0x86, 0x14, 0xc8, 0x36, 0xdc, 0x39, 0xd2, 0x2c, 0x3c, 0xf7, 0x43, 0xd2, 0x45,
	0xbf, 0x76, 0x4f, 0x85, 0xba, 0xcb, 0xf4, 0x39, 0xf3, 0xf7, 0xd2, 0x8b, 0xfe, 0x9c, 0x37, 0x05,
	0xea, 0x0d, 0xdc, 0xa1, 0x4a, 0x9b, 0x41, 0xfa, 0xe9, 0x4c, 0x16, 0x9f, 0xfe, 0x97, 0xc7, 0xa9,
	0x55, 0xae, 0xdd, 0xe0, 0x30, 0x99, 0xc1, 0xbe, 0x7e, 0xf9, 0x21, 0x2e, 0xc8, 0x67, 0xd0, 0x09,
	0xec, 0x45, 0x0d, 0xe9, 0x87, 0x03, 0xee, 0x12, 0xe0, 0xd0, 0x82, 0x6e, 0x00, 0x9c, 0x66, 0x3f,
	0xe5, 0xd0, 0xf3, 0x67, 0xd0, 0x6e, 0xed, 0xf6, 0x65, 0xaa, 0x51, 0xd9, 0x72, 0xdc, 0xe9, 0x35,
	0x20, 0x17, 0x5f, 0x24, 0x3a, 0x50, 0x16, 0xd3, 0xd0, 0x6e, 0xbe, 0xdc, 0x2f, 0x21, 0x5f, 0xaf,
	0x56, 0x65, 0xe5, 0xad, 0x3b, 0xbd, 0x85, 0xf4, 0x57, 0x50, 0xa8, 0x57, 0x05, 0x6c, 0x13, 0x65,
	0xdd, 0x2a, 0xf9, 0xbd, 0x1b, 0xea, 0x3a, 0xb8, 0x24, 0xdf, 0x3a, 0xbc, 0xc6, 0xea, 0x48, 0xe1,
	0x0f, 0xf8, 0xdf, 0x21, 0x5c, 0xdf, 0x09, 0xf1, 0x7c, 0x2d, 0xbd, 0x4b, 0x55, 0x8a, 0x24, 0xba,
	0xfe, 0xdf, 0x4f, 0x36, 0xa7, 0x9a, 0x79, 0x6b, 0xac, 0x17, 0x90, 0x17, 0xcf, 0x5c, 0x47, 0x35,
	0x2f, 0x8c, 0x1b, 0x54, 0x2b, 0x0e, 0x61, 0x55, 0xc0, 0x23, 0xd3, 0x74, 0xae, 0x2f, 0x33, 0x5a,
	0xa5, 0xff, 0xef, 0xe1, 0xe7, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x37, 0xcf, 0xba, 0xd4, 0xfd,
	0x41, 0x00, 0x00,
}
